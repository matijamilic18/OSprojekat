GAS LISTING /tmp/ccZwsoSP.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv10popSppSpieEv
   9              	_ZN5Riscv10popSppSpieEv:
  10              	.LFB33:
  11              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** //
   2:src/riscv.cpp **** // Created by marko on 20.4.22..
   3:src/riscv.cpp **** //
   4:src/riscv.cpp **** 
   5:src/riscv.cpp **** #include "../h/riscv.hpp"
   6:src/riscv.cpp **** #include "../h/tcb.hpp"
   7:src/riscv.cpp **** #include "../lib/console.h"
   8:src/riscv.cpp **** #include "../h/syscall_c.hpp"
   9:src/riscv.cpp **** #include "../h/print.hpp"
  10:src/riscv.cpp **** #include "../lib/mem.h"
  11:src/riscv.cpp **** 
  12:src/riscv.cpp **** void Riscv::popSppSpie()
  13:src/riscv.cpp **** {
  12              		.loc 1 13 1
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  14:src/riscv.cpp ****     Riscv::ms_sstatus(SSTATUS_SPIE);
  20              		.loc 1 14 5
  21              	.LVL0:
  22              	.LBB26:
  23              	.LBB27:
  24              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by marko on 20.4.22..
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   6:src/../h/riscv.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/riscv.hpp **** 
  10:src/../h/riscv.hpp **** class Riscv
  11:src/../h/riscv.hpp **** {
  12:src/../h/riscv.hpp **** public:
  13:src/../h/riscv.hpp **** 
  14:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non-inline function)
  15:src/../h/riscv.hpp ****     static void popSppSpie();
  16:src/../h/riscv.hpp **** 
  17:src/../h/riscv.hpp ****     // read register scause
  18:src/../h/riscv.hpp ****     static uint64 r_scause();
  19:src/../h/riscv.hpp **** 
  20:src/../h/riscv.hpp ****     // write register scause
GAS LISTING /tmp/ccZwsoSP.s 			page 2


  21:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  22:src/../h/riscv.hpp **** 
  23:src/../h/riscv.hpp ****     // read register sepc
  24:src/../h/riscv.hpp ****     static uint64 r_sepc();
  25:src/../h/riscv.hpp **** 
  26:src/../h/riscv.hpp ****     // write register sepc
  27:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  28:src/../h/riscv.hpp **** 
  29:src/../h/riscv.hpp ****     // read register stvec
  30:src/../h/riscv.hpp ****     static uint64 r_stvec();
  31:src/../h/riscv.hpp **** 
  32:src/../h/riscv.hpp ****     // write register stvec
  33:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  34:src/../h/riscv.hpp **** 
  35:src/../h/riscv.hpp ****     // read register stval
  36:src/../h/riscv.hpp ****     static uint64 r_stval();
  37:src/../h/riscv.hpp **** 
  38:src/../h/riscv.hpp ****     // write register stval
  39:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  40:src/../h/riscv.hpp **** 
  41:src/../h/riscv.hpp ****     enum BitMaskSip
  42:src/../h/riscv.hpp ****     {
  43:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  44:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  45:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  46:src/../h/riscv.hpp ****     };
  47:src/../h/riscv.hpp **** 
  48:src/../h/riscv.hpp ****     // mask set register sip
  49:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  50:src/../h/riscv.hpp **** 
  51:src/../h/riscv.hpp ****     // mask clear register sip
  52:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  53:src/../h/riscv.hpp **** 
  54:src/../h/riscv.hpp ****     // read register sip
  55:src/../h/riscv.hpp ****     static uint64 r_sip();
  56:src/../h/riscv.hpp **** 
  57:src/../h/riscv.hpp ****     // write register sip
  58:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  59:src/../h/riscv.hpp **** 
  60:src/../h/riscv.hpp ****     enum BitMaskSstatus
  61:src/../h/riscv.hpp ****     {
  62:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  63:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  64:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  65:src/../h/riscv.hpp ****     };
  66:src/../h/riscv.hpp **** 
  67:src/../h/riscv.hpp ****     // mask set register sstatus
  68:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  69:src/../h/riscv.hpp **** 
  70:src/../h/riscv.hpp ****     // mask clear register sstatus
  71:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  72:src/../h/riscv.hpp **** 
  73:src/../h/riscv.hpp ****     // read register sstatus
  74:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  75:src/../h/riscv.hpp **** 
  76:src/../h/riscv.hpp ****     // write register sstatus
  77:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
GAS LISTING /tmp/ccZwsoSP.s 			page 3


  78:src/../h/riscv.hpp **** 
  79:src/../h/riscv.hpp ****     // supervisor trap
  80:src/../h/riscv.hpp ****     static void supervisorTrap();
  81:src/../h/riscv.hpp **** 
  82:src/../h/riscv.hpp **** private:
  83:src/../h/riscv.hpp **** 
  84:src/../h/riscv.hpp ****     // supervisor trap handler
  85:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
  86:src/../h/riscv.hpp **** 
  87:src/../h/riscv.hpp **** };
  88:src/../h/riscv.hpp **** 
  89:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
  90:src/../h/riscv.hpp **** {
  91:src/../h/riscv.hpp ****     uint64 volatile scause;
  92:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  93:src/../h/riscv.hpp ****     return scause;
  94:src/../h/riscv.hpp **** }
  95:src/../h/riscv.hpp **** 
  96:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
  97:src/../h/riscv.hpp **** {
  98:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
  99:src/../h/riscv.hpp **** }
 100:src/../h/riscv.hpp **** 
 101:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 102:src/../h/riscv.hpp **** {
 103:src/../h/riscv.hpp ****     uint64 volatile sepc;
 104:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 105:src/../h/riscv.hpp ****     return sepc;
 106:src/../h/riscv.hpp **** }
 107:src/../h/riscv.hpp **** 
 108:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 109:src/../h/riscv.hpp **** {
 110:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 111:src/../h/riscv.hpp **** }
 112:src/../h/riscv.hpp **** 
 113:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 114:src/../h/riscv.hpp **** {
 115:src/../h/riscv.hpp ****     uint64 volatile stvec;
 116:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 117:src/../h/riscv.hpp ****     return stvec;
 118:src/../h/riscv.hpp **** }
 119:src/../h/riscv.hpp **** 
 120:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 121:src/../h/riscv.hpp **** {
 122:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 123:src/../h/riscv.hpp **** }
 124:src/../h/riscv.hpp **** 
 125:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 126:src/../h/riscv.hpp **** {
 127:src/../h/riscv.hpp ****     uint64 volatile stval;
 128:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 129:src/../h/riscv.hpp ****     return stval;
 130:src/../h/riscv.hpp **** }
 131:src/../h/riscv.hpp **** 
 132:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 133:src/../h/riscv.hpp **** {
 134:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
GAS LISTING /tmp/ccZwsoSP.s 			page 4


 135:src/../h/riscv.hpp **** }
 136:src/../h/riscv.hpp **** 
 137:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 138:src/../h/riscv.hpp **** {
 139:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 140:src/../h/riscv.hpp **** }
 141:src/../h/riscv.hpp **** 
 142:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 143:src/../h/riscv.hpp **** {
 144:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 145:src/../h/riscv.hpp **** }
 146:src/../h/riscv.hpp **** 
 147:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 148:src/../h/riscv.hpp **** {
 149:src/../h/riscv.hpp ****     uint64 volatile sip;
 150:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 151:src/../h/riscv.hpp ****     return sip;
 152:src/../h/riscv.hpp **** }
 153:src/../h/riscv.hpp **** 
 154:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 155:src/../h/riscv.hpp **** {
 156:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 157:src/../h/riscv.hpp **** }
 158:src/../h/riscv.hpp **** 
 159:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 160:src/../h/riscv.hpp **** {
 161:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
  25              		.loc 2 161 5
  26              		.loc 2 161 68 is_stmt 0
  27 000c 93070002 		li	a5,32
  28              	#APP
  29              	# 161 "src/../h/riscv.hpp" 1
 162              	}
  30              		csrs sstatus, a5
  31              	# 0 "" 2
  32              	.LVL1:
  33              	#NO_APP
  34              	.LBE27:
  35              	.LBE26:
  15:src/riscv.cpp **** 
  16:src/riscv.cpp ****     __asm__ volatile("csrw sepc, ra");
  36              		.loc 1 16 5 is_stmt 1
  37              		.loc 1 16 38 is_stmt 0
  38              	#APP
  39              	# 16 "src/riscv.cpp" 1
  17              	    __asm__ volatile("sret");
  40              		csrw sepc, ra
  41              	# 0 "" 2
  42              		.loc 1 17 5 is_stmt 1
  43              		.loc 1 17 29 is_stmt 0
  44              	# 17 "src/riscv.cpp" 1
  18              	}
  45              		sret
  46              	# 0 "" 2
  47              		.loc 1 18 1
  48              	#NO_APP
  49 001c 03348100 		ld	s0,8(sp)
GAS LISTING /tmp/ccZwsoSP.s 			page 5


  50              		.cfi_restore 8
  51              		.cfi_def_cfa 2, 16
  52 0020 13010101 		addi	sp,sp,16
  53              		.cfi_def_cfa_offset 0
  54 0024 67800000 		jr	ra
  55              		.cfi_endproc
  56              	.LFE33:
  58              		.align	2
  59              		.globl	_ZN5Riscv20handleSupervisorTrapEv
  61              	_ZN5Riscv20handleSupervisorTrapEv:
  62              	.LFB34:
  19:src/riscv.cpp **** 
  20:src/riscv.cpp **** void Riscv::handleSupervisorTrap()
  21:src/riscv.cpp **** {
  63              		.loc 1 21 1 is_stmt 1
  64              		.cfi_startproc
  65 0028 130101F9 		addi	sp,sp,-112
  66              		.cfi_def_cfa_offset 112
  67 002c 23341106 		sd	ra,104(sp)
  68 0030 23308106 		sd	s0,96(sp)
  69 0034 233C9104 		sd	s1,88(sp)
  70              		.cfi_offset 1, -8
  71              		.cfi_offset 8, -16
  72              		.cfi_offset 9, -24
  73 0038 13040107 		addi	s0,sp,112
  74              		.cfi_def_cfa 8, 0
  22:src/riscv.cpp **** 
  23:src/riscv.cpp ****     uint64 volatile sepc = r_sepc();
  75              		.loc 1 23 5
  76              	.LBB28:
  77              	.LBB29:
 103:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
  78              		.loc 2 103 5
 104:src/../h/riscv.hpp ****     return sepc;
  79              		.loc 2 104 5
 104:src/../h/riscv.hpp ****     return sepc;
  80              		.loc 2 104 64 is_stmt 0
  81              	#APP
  82              	# 104 "src/../h/riscv.hpp" 1
  83              		csrr a5, sepc
  84              	# 0 "" 2
  85              	#NO_APP
  86 0040 2330F4FC 		sd	a5,-64(s0)
 105:src/../h/riscv.hpp **** }
  87              		.loc 2 105 5 is_stmt 1
 105:src/../h/riscv.hpp **** }
  88              		.loc 2 105 12 is_stmt 0
  89 0044 833704FC 		ld	a5,-64(s0)
  90              	.LBE29:
  91              	.LBE28:
  92              		.loc 1 23 35
  93 0048 233CF4FC 		sd	a5,-40(s0)
  24:src/riscv.cpp ****     uint64 volatile sstatus= r_sstatus();
  94              		.loc 1 24 5 is_stmt 1
  95              	.LBB30:
  96              	.LBB31:
 163:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccZwsoSP.s 			page 6


 164:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 165:src/../h/riscv.hpp **** {
 166:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 167:src/../h/riscv.hpp **** }
 168:src/../h/riscv.hpp **** 
 169:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 170:src/../h/riscv.hpp **** {
 171:src/../h/riscv.hpp ****     uint64 volatile sstatus;
  97              		.loc 2 171 5
 172:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
  98              		.loc 2 172 5
  99              		.loc 2 172 76 is_stmt 0
 100              	#APP
 101              	# 172 "src/../h/riscv.hpp" 1
 173              	    return sstatus;
 102              		csrr a5, sstatus
 103              	# 0 "" 2
 104              	#NO_APP
 105 0050 233CF4FA 		sd	a5,-72(s0)
 106              		.loc 2 173 5 is_stmt 1
 107              		.loc 2 173 12 is_stmt 0
 108 0054 833784FB 		ld	a5,-72(s0)
 109              	.LBE31:
 110              	.LBE30:
 111              		.loc 1 24 40
 112 0058 2338F4FC 		sd	a5,-48(s0)
  25:src/riscv.cpp ****     uint64 volatile scause = r_scause();
 113              		.loc 1 25 5 is_stmt 1
 114              	.LBB32:
 115              	.LBB33:
  91:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 116              		.loc 2 91 5
  92:src/../h/riscv.hpp ****     return scause;
 117              		.loc 2 92 5
  92:src/../h/riscv.hpp ****     return scause;
 118              		.loc 2 92 72 is_stmt 0
 119              	#APP
 120              	# 92 "src/../h/riscv.hpp" 1
 121              		csrr a5, scause
 122              	# 0 "" 2
 123              	#NO_APP
 124 0060 2338F4FA 		sd	a5,-80(s0)
  93:src/../h/riscv.hpp **** }
 125              		.loc 2 93 5 is_stmt 1
  93:src/../h/riscv.hpp **** }
 126              		.loc 2 93 12 is_stmt 0
 127 0064 833704FB 		ld	a5,-80(s0)
 128              	.LBE33:
 129              	.LBE32:
 130              		.loc 1 25 39
 131 0068 2334F4FC 		sd	a5,-56(s0)
  26:src/riscv.cpp **** 
  27:src/riscv.cpp ****     if (scause == 0x0000000000000008UL || scause == 0x0000000000000009UL)
 132              		.loc 1 27 5 is_stmt 1
 133              	.LBB34:
 134              		.loc 1 27 16 is_stmt 0
 135 006c 033784FC 		ld	a4,-56(s0)
GAS LISTING /tmp/ccZwsoSP.s 			page 7


 136              		.loc 1 27 40
 137 0070 93078000 		li	a5,8
 138 0074 6304F704 		beq	a4,a5,.L4
 139              		.loc 1 27 50 discriminator 2
 140 0078 033784FC 		ld	a4,-56(s0)
 141              		.loc 1 27 40 discriminator 2
 142 007c 93079000 		li	a5,9
 143 0080 630EF702 		beq	a4,a5,.L4
  28:src/riscv.cpp ****     {
  29:src/riscv.cpp ****         uint64  volatile CODE;
  30:src/riscv.cpp ****         uint64  volatile arg1;
  31:src/riscv.cpp ****         uint64  volatile arg2;
  32:src/riscv.cpp ****         uint64  volatile arg3;
  33:src/riscv.cpp ****         __asm__ volatile("mv %0, a0" : "=r" (CODE));
  34:src/riscv.cpp ****         __asm__ volatile("mv %0, a1" : "=r" (arg1));
  35:src/riscv.cpp ****         __asm__ volatile("mv %0, a2" : "=r" (arg2));
  36:src/riscv.cpp ****         __asm__ volatile("mv %0, a3" : "=r" (arg3));
  37:src/riscv.cpp **** 
  38:src/riscv.cpp **** 
  39:src/riscv.cpp ****         // interrupt: no; cause code: environment call from U-mode(8) or S-mode(9)
  40:src/riscv.cpp ****         sepc= sepc +4;
  41:src/riscv.cpp ****         uint64 rett;
  42:src/riscv.cpp **** 
  43:src/riscv.cpp ****         thread_t* handle;
  44:src/riscv.cpp **** 
  45:src/riscv.cpp ****         if (CODE == SCALL_THREAD_CREATE){
  46:src/riscv.cpp **** 
  47:src/riscv.cpp **** 
  48:src/riscv.cpp ****             handle = (thread_t*) arg1;
  49:src/riscv.cpp **** 
  50:src/riscv.cpp ****             if (handle != nullptr){
  51:src/riscv.cpp ****                 *handle = TCB::createThread(reinterpret_cast<void (*) (void*)>(arg2),(void*)arg3);
  52:src/riscv.cpp **** 
  53:src/riscv.cpp ****                 rett=0;
  54:src/riscv.cpp ****             }else {
  55:src/riscv.cpp ****                 rett=-1;
  56:src/riscv.cpp ****             }
  57:src/riscv.cpp ****             __asm__ volatile ("sd %0, 10*8(fp)" :: "r"(rett));
  58:src/riscv.cpp **** 
  59:src/riscv.cpp **** 
  60:src/riscv.cpp **** 
  61:src/riscv.cpp ****         }else if (CODE == SCALL_THREAD_DISPATCH){
  62:src/riscv.cpp ****             TCB::timeSliceCounter=0;
  63:src/riscv.cpp ****             TCB::dispatch();
  64:src/riscv.cpp **** 
  65:src/riscv.cpp ****         }else if (CODE==MEM_ALLOC){
  66:src/riscv.cpp ****             void* re = __mem_alloc(arg1);
  67:src/riscv.cpp ****             __asm__ volatile ("sd %0, 10*8(fp)" :: "r"(re));
  68:src/riscv.cpp **** 
  69:src/riscv.cpp ****         }else if (CODE==MEM_FREE){
  70:src/riscv.cpp ****             void* tmp = (void*) arg1;
  71:src/riscv.cpp ****             rett = __mem_free(tmp);
  72:src/riscv.cpp ****             __asm__ volatile ("sd %0, 10*8(fp)" :: "r"(rett));
  73:src/riscv.cpp **** 
  74:src/riscv.cpp ****         }
  75:src/riscv.cpp **** 
  76:src/riscv.cpp **** 
GAS LISTING /tmp/ccZwsoSP.s 			page 8


  77:src/riscv.cpp **** 
  78:src/riscv.cpp **** 
  79:src/riscv.cpp **** 
  80:src/riscv.cpp ****         /*TCB::timeSliceCounter = 0;
  81:src/riscv.cpp ****         TCB::dispatch();
  82:src/riscv.cpp ****         w_sstatus(sstatus);
  83:src/riscv.cpp ****         w_sepc(sepc);*/
  84:src/riscv.cpp ****     }
  85:src/riscv.cpp ****     else if (scause == 0x8000000000000001UL)
 144              		.loc 1 85 10 is_stmt 1
 145              		.loc 1 85 21 is_stmt 0
 146 0084 033784FC 		ld	a4,-56(s0)
 147              		.loc 1 85 10
 148 0088 9307F0FF 		li	a5,-1
 149 008c 9397F703 		slli	a5,a5,63
 150 0090 93871700 		addi	a5,a5,1
 151 0094 630AF710 		beq	a4,a5,.L17
  86:src/riscv.cpp ****     {
  87:src/riscv.cpp **** 
  88:src/riscv.cpp ****         // interrupt: yes; cause code: supervisor software interrupt (CLINT; machine timer interrup
  89:src/riscv.cpp ****         TCB::timeSliceCounter++;
  90:src/riscv.cpp ****         if (TCB::running != nullptr && TCB::timeSliceCounter >= TCB::running->getTimeSlice())
  91:src/riscv.cpp ****         {
  92:src/riscv.cpp ****             TCB::timeSliceCounter=0;
  93:src/riscv.cpp ****             TCB::dispatch();
  94:src/riscv.cpp ****         }
  95:src/riscv.cpp ****         mc_sip(SIP_SSIP);
  96:src/riscv.cpp **** 
  97:src/riscv.cpp ****     }
  98:src/riscv.cpp ****     else if (scause == 0x8000000000000009UL)
 152              		.loc 1 98 10 is_stmt 1
 153              		.loc 1 98 21 is_stmt 0
 154 0098 033784FC 		ld	a4,-56(s0)
 155              		.loc 1 98 10
 156 009c 9307F0FF 		li	a5,-1
 157 00a0 9397F703 		slli	a5,a5,63
 158 00a4 93879700 		addi	a5,a5,9
 159 00a8 6308F714 		beq	a4,a5,.L18
  99:src/riscv.cpp ****     {
 100:src/riscv.cpp ****         // interrupt: yes; cause code: supervisor external interrupt (PLIC; could be keyboard)
 101:src/riscv.cpp ****         console_handler();
 102:src/riscv.cpp ****     }
 103:src/riscv.cpp ****     else
 104:src/riscv.cpp ****     {
 105:src/riscv.cpp ****         __putc('g');
 160              		.loc 1 105 9 is_stmt 1
 161              		.loc 1 105 15 is_stmt 0
 162 00ac 13057006 		li	a0,103
 163 00b0 97000000 		call	__putc@plt
 163      E7800000 
 164              	.LVL2:
 165 00b8 6F004008 		j	.L9
 166              	.L4:
 167              	.LBB35:
  29:src/riscv.cpp ****         uint64  volatile arg1;
 168              		.loc 1 29 9 is_stmt 1
  30:src/riscv.cpp ****         uint64  volatile arg2;
GAS LISTING /tmp/ccZwsoSP.s 			page 9


 169              		.loc 1 30 9
  31:src/riscv.cpp ****         uint64  volatile arg3;
 170              		.loc 1 31 9
  32:src/riscv.cpp ****         __asm__ volatile("mv %0, a0" : "=r" (CODE));
 171              		.loc 1 32 9
  33:src/riscv.cpp ****         __asm__ volatile("mv %0, a1" : "=r" (arg1));
 172              		.loc 1 33 9
  33:src/riscv.cpp ****         __asm__ volatile("mv %0, a1" : "=r" (arg1));
 173              		.loc 1 33 52 is_stmt 0
 174              	#APP
 175              	# 33 "src/riscv.cpp" 1
 176              		mv a5, a0
 177              	# 0 "" 2
 178              	#NO_APP
 179 00c0 2338F4F8 		sd	a5,-112(s0)
  34:src/riscv.cpp ****         __asm__ volatile("mv %0, a2" : "=r" (arg2));
 180              		.loc 1 34 9 is_stmt 1
  34:src/riscv.cpp ****         __asm__ volatile("mv %0, a2" : "=r" (arg2));
 181              		.loc 1 34 52 is_stmt 0
 182              	#APP
 183              	# 34 "src/riscv.cpp" 1
 184              		mv a5, a1
 185              	# 0 "" 2
 186              	#NO_APP
 187 00c8 233CF4F8 		sd	a5,-104(s0)
  35:src/riscv.cpp ****         __asm__ volatile("mv %0, a3" : "=r" (arg3));
 188              		.loc 1 35 9 is_stmt 1
  35:src/riscv.cpp ****         __asm__ volatile("mv %0, a3" : "=r" (arg3));
 189              		.loc 1 35 52 is_stmt 0
 190              	#APP
 191              	# 35 "src/riscv.cpp" 1
 192              		mv a5, a2
 193              	# 0 "" 2
 194              	#NO_APP
 195 00d0 2330F4FA 		sd	a5,-96(s0)
  36:src/riscv.cpp **** 
 196              		.loc 1 36 9 is_stmt 1
  36:src/riscv.cpp **** 
 197              		.loc 1 36 52 is_stmt 0
 198              	#APP
 199              	# 36 "src/riscv.cpp" 1
 200              		mv a5, a3
 201              	# 0 "" 2
 202              	#NO_APP
 203 00d8 2334F4FA 		sd	a5,-88(s0)
  40:src/riscv.cpp ****         uint64 rett;
 204              		.loc 1 40 9 is_stmt 1
  40:src/riscv.cpp ****         uint64 rett;
 205              		.loc 1 40 15 is_stmt 0
 206 00dc 833784FD 		ld	a5,-40(s0)
  40:src/riscv.cpp ****         uint64 rett;
 207              		.loc 1 40 20
 208 00e0 93874700 		addi	a5,a5,4
  40:src/riscv.cpp ****         uint64 rett;
 209              		.loc 1 40 13
 210 00e4 233CF4FC 		sd	a5,-40(s0)
  41:src/riscv.cpp **** 
GAS LISTING /tmp/ccZwsoSP.s 			page 10


 211              		.loc 1 41 9 is_stmt 1
  43:src/riscv.cpp **** 
 212              		.loc 1 43 9
  45:src/riscv.cpp **** 
 213              		.loc 1 45 9
 214              	.LBB36:
  45:src/riscv.cpp **** 
 215              		.loc 1 45 18 is_stmt 0
 216 00e8 033704F9 		ld	a4,-112(s0)
  45:src/riscv.cpp **** 
 217              		.loc 1 45 9
 218 00ec 93071001 		li	a5,17
 219 00f0 630EF702 		beq	a4,a5,.L19
 220              	.LBE36:
 221              	.LBE35:
 222              	.LBE34:
  61:src/riscv.cpp ****             TCB::timeSliceCounter=0;
 223              		.loc 1 61 15 is_stmt 1
 224              	.LBB59:
 225              	.LBB51:
 226              	.LBB47:
 227              	.LBB37:
  61:src/riscv.cpp ****             TCB::timeSliceCounter=0;
 228              		.loc 1 61 24 is_stmt 0
 229 00f4 033704F9 		ld	a4,-112(s0)
  61:src/riscv.cpp ****             TCB::timeSliceCounter=0;
 230              		.loc 1 61 15
 231 00f8 93073001 		li	a5,19
 232 00fc 6300F708 		beq	a4,a5,.L20
 233              	.LBE37:
 234              	.LBE47:
 235              	.LBE51:
 236              	.LBE59:
  65:src/riscv.cpp ****             void* re = __mem_alloc(arg1);
 237              		.loc 1 65 15 is_stmt 1
 238              	.LBB60:
 239              	.LBB52:
 240              	.LBB48:
 241              	.LBB44:
 242              	.LBB38:
  65:src/riscv.cpp ****             void* re = __mem_alloc(arg1);
 243              		.loc 1 65 23 is_stmt 0
 244 0100 033704F9 		ld	a4,-112(s0)
  65:src/riscv.cpp ****             void* re = __mem_alloc(arg1);
 245              		.loc 1 65 15
 246 0104 93071000 		li	a5,1
 247 0108 6306F708 		beq	a4,a5,.L21
 248              	.LBE38:
 249              	.LBE44:
 250              	.LBE48:
 251              	.LBE52:
 252              	.LBE60:
  69:src/riscv.cpp ****             void* tmp = (void*) arg1;
 253              		.loc 1 69 15 is_stmt 1
 254              	.LBB61:
 255              	.LBB53:
 256              	.LBB49:
GAS LISTING /tmp/ccZwsoSP.s 			page 11


 257              	.LBB45:
 258              	.LBB42:
 259              	.LBB39:
  69:src/riscv.cpp ****             void* tmp = (void*) arg1;
 260              		.loc 1 69 23 is_stmt 0
 261 010c 033704F9 		ld	a4,-112(s0)
  69:src/riscv.cpp ****             void* tmp = (void*) arg1;
 262              		.loc 1 69 15
 263 0110 93072000 		li	a5,2
 264 0114 6314F702 		bne	a4,a5,.L9
 265              	.LBB40:
  70:src/riscv.cpp ****             rett = __mem_free(tmp);
 266              		.loc 1 70 13 is_stmt 1
  70:src/riscv.cpp ****             rett = __mem_free(tmp);
 267              		.loc 1 70 33 is_stmt 0
 268 0118 033584F9 		ld	a0,-104(s0)
 269              	.LVL3:
  71:src/riscv.cpp ****             __asm__ volatile ("sd %0, 10*8(fp)" :: "r"(rett));
 270              		.loc 1 71 13 is_stmt 1
  71:src/riscv.cpp ****             __asm__ volatile ("sd %0, 10*8(fp)" :: "r"(rett));
 271              		.loc 1 71 30 is_stmt 0
 272 011c 97000000 		call	__mem_free@plt
 272      E7800000 
 273              	.LVL4:
  72:src/riscv.cpp **** 
 274              		.loc 1 72 13 is_stmt 1
  72:src/riscv.cpp **** 
 275              		.loc 1 72 62 is_stmt 0
 276              	#APP
 277              	# 72 "src/riscv.cpp" 1
 278              		sd a0, 10*8(fp)
 279              	# 0 "" 2
 280              	#NO_APP
 281              	.LBE40:
 282 0128 6F004001 		j	.L9
 283              	.LVL5:
 284              	.L19:
 285              	.LBE39:
 286              	.LBE42:
 287              	.LBE45:
  48:src/riscv.cpp **** 
 288              		.loc 1 48 13 is_stmt 1
  48:src/riscv.cpp **** 
 289              		.loc 1 48 20 is_stmt 0
 290 012c 833484F9 		ld	s1,-104(s0)
 291              	.LVL6:
  50:src/riscv.cpp ****                 *handle = TCB::createThread(reinterpret_cast<void (*) (void*)>(arg2),(void*)arg3);
 292              		.loc 1 50 13 is_stmt 1
 293 0130 63980402 		bnez	s1,.L22
  55:src/riscv.cpp ****             }
 294              		.loc 1 55 21 is_stmt 0
 295 0134 9307F0FF 		li	a5,-1
 296              	.L8:
 297              	.LVL7:
  57:src/riscv.cpp **** 
 298              		.loc 1 57 13 is_stmt 1
  57:src/riscv.cpp **** 
GAS LISTING /tmp/ccZwsoSP.s 			page 12


 299              		.loc 1 57 62 is_stmt 0
 300              	#APP
 301              	# 57 "src/riscv.cpp" 1
 302              		sd a5, 10*8(fp)
 303              	# 0 "" 2
 304              	.LVL8:
 305              	#NO_APP
 306              	.L9:
 307              	.LBE49:
 308              	.LBE53:
 309              	.LBE61:
 106:src/riscv.cpp ****     }
 107:src/riscv.cpp ****     w_sepc(sepc);
 310              		.loc 1 107 5 is_stmt 1
 311              		.loc 1 107 11 is_stmt 0
 312 013c 833784FD 		ld	a5,-40(s0)
 313              	.LVL9:
 314              	.LBB62:
 315              	.LBB63:
 110:src/../h/riscv.hpp **** }
 316              		.loc 2 110 5 is_stmt 1
 110:src/../h/riscv.hpp **** }
 317              		.loc 2 110 65 is_stmt 0
 318              	#APP
 319              	# 110 "src/../h/riscv.hpp" 1
 320              		csrw sepc, a5
 321              	# 0 "" 2
 322              	.LVL10:
 323              	#NO_APP
 324              	.LBE63:
 325              	.LBE62:
 108:src/riscv.cpp ****     w_sstatus(sstatus);
 326              		.loc 1 108 5 is_stmt 1
 327              		.loc 1 108 14 is_stmt 0
 328 0144 833704FD 		ld	a5,-48(s0)
 329              	.LVL11:
 330              	.LBB64:
 331              	.LBB65:
 174:src/../h/riscv.hpp **** }
 175:src/../h/riscv.hpp **** 
 176:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 177:src/../h/riscv.hpp **** {
 178:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 332              		.loc 2 178 5 is_stmt 1
 333              		.loc 2 178 77 is_stmt 0
 334              	#APP
 335              	# 178 "src/../h/riscv.hpp" 1
 179              	}
 336              		csrw sstatus, a5
 337              	# 0 "" 2
 338              	.LVL12:
 339              	#NO_APP
 340              	.LBE65:
 341              	.LBE64:
 109:src/riscv.cpp **** }...
 342              		.loc 1 109 1
 343 014c 83308106 		ld	ra,104(sp)
GAS LISTING /tmp/ccZwsoSP.s 			page 13


 344              		.cfi_remember_state
 345              		.cfi_restore 1
 346 0150 03340106 		ld	s0,96(sp)
 347              		.cfi_restore 8
 348              		.cfi_def_cfa 2, 112
 349 0154 83348105 		ld	s1,88(sp)
 350              		.cfi_restore 9
 351 0158 13010107 		addi	sp,sp,112
 352              		.cfi_def_cfa_offset 0
 353 015c 67800000 		jr	ra
 354              	.LVL13:
 355              	.L22:
 356              		.cfi_restore_state
 357              	.LBB66:
 358              	.LBB54:
 359              	.LBB50:
  51:src/riscv.cpp ****                 *handle = TCB::createThread(reinterpret_cast<void (*) (void*)>(arg2),(void*)arg3);
 360              		.loc 1 51 17 is_stmt 1
  51:src/riscv.cpp ****                 *handle = TCB::createThread(reinterpret_cast<void (*) (void*)>(arg2),(void*)arg3);
 361              		.loc 1 51 44 is_stmt 0
 362 0160 033504FA 		ld	a0,-96(s0)
 363 0164 833584FA 		ld	a1,-88(s0)
 364 0168 97000000 		call	_ZN3TCB12createThreadEPFvPvES0_@plt
 364      E7800000 
 365              	.LVL14:
  51:src/riscv.cpp ****                 *handle = TCB::createThread(reinterpret_cast<void (*) (void*)>(arg2),(void*)arg3);
 366              		.loc 1 51 25
 367 0170 23B0A400 		sd	a0,0(s1)
  53:src/riscv.cpp ****                 rett=0;
 368              		.loc 1 53 17 is_stmt 1
 369              	.LVL15:
  53:src/riscv.cpp ****                 rett=0;
 370              		.loc 1 53 21 is_stmt 0
 371 0174 93070000 		li	a5,0
 372 0178 6FF01FFC 		j	.L8
 373              	.LVL16:
 374              	.L20:
 375              	.LBB46:
  62:src/riscv.cpp ****             TCB::timeSliceCounter=0;
 376              		.loc 1 62 13 is_stmt 1
  62:src/riscv.cpp ****             TCB::timeSliceCounter=0;
 377              		.loc 1 62 34 is_stmt 0
 378 017c 97070000 		la	a5,_ZN3TCB16timeSliceCounterE
 378      83B70700 
 379 0184 23B00700 		sd	zero,0(a5)
  63:src/riscv.cpp ****             TCB::dispatch();
 380              		.loc 1 63 13 is_stmt 1
  63:src/riscv.cpp ****             TCB::dispatch();
 381              		.loc 1 63 26 is_stmt 0
 382 0188 97000000 		call	_ZN3TCB8dispatchEv@plt
 382      E7800000 
 383              	.LVL17:
 384 0190 6FF0DFFA 		j	.L9
 385              	.L21:
 386              	.LBB43:
 387              	.LBB41:
  66:src/riscv.cpp ****             void* re = __mem_alloc(arg1);
GAS LISTING /tmp/ccZwsoSP.s 			page 14


 388              		.loc 1 66 13 is_stmt 1
  66:src/riscv.cpp ****             void* re = __mem_alloc(arg1);
 389              		.loc 1 66 35 is_stmt 0
 390 0194 033584F9 		ld	a0,-104(s0)
 391 0198 97000000 		call	__mem_alloc@plt
 391      E7800000 
 392              	.LVL18:
  67:src/riscv.cpp ****             __asm__ volatile ("sd %0, 10*8(fp)" :: "r"(re));
 393              		.loc 1 67 13 is_stmt 1
  67:src/riscv.cpp ****             __asm__ volatile ("sd %0, 10*8(fp)" :: "r"(re));
 394              		.loc 1 67 60 is_stmt 0
 395              	#APP
 396              	# 67 "src/riscv.cpp" 1
 397              		sd a0, 10*8(fp)
 398              	# 0 "" 2
 399              	#NO_APP
 400              	.LBE41:
 401 01a4 6FF09FF9 		j	.L9
 402              	.LVL19:
 403              	.L17:
 404              	.LBE43:
 405              	.LBE46:
 406              	.LBE50:
 407              	.LBE54:
  89:src/riscv.cpp ****         TCB::timeSliceCounter++;
 408              		.loc 1 89 9 is_stmt 1
  89:src/riscv.cpp ****         TCB::timeSliceCounter++;
 409              		.loc 1 89 30 is_stmt 0
 410 01a8 17070000 		la	a4,_ZN3TCB16timeSliceCounterE
 410      03370700 
 411 01b0 83370700 		ld	a5,0(a4)
 412 01b4 93871700 		addi	a5,a5,1
 413 01b8 2330F700 		sd	a5,0(a4)
  90:src/riscv.cpp ****         if (TCB::running != nullptr && TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 414              		.loc 1 90 9 is_stmt 1
  90:src/riscv.cpp ****         if (TCB::running != nullptr && TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 415              		.loc 1 90 26 is_stmt 0
 416 01bc 17070000 		la	a4,_ZN3TCB7runningE
 416      03370700 
 417 01c4 03370700 		ld	a4,0(a4)
  90:src/riscv.cpp ****         if (TCB::running != nullptr && TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 418              		.loc 1 90 37
 419 01c8 63060700 		beqz	a4,.L12
 420              	.LVL20:
 421              	.LBB55:
 422              	.LBB56:
 423              		.file 3 "src/../h/tcb.hpp"
   1:src/../h/tcb.hpp **** //
   2:src/../h/tcb.hpp **** // Created by marko on 20.4.22..
   3:src/../h/tcb.hpp **** //
   4:src/../h/tcb.hpp **** 
   5:src/../h/tcb.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_TCB_HPP
   6:src/../h/tcb.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_TCB_HPP
   7:src/../h/tcb.hpp **** 
   8:src/../h/tcb.hpp **** #include "../lib/hw.h"
   9:src/../h/tcb.hpp **** #include "scheduler.hpp"
  10:src/../h/tcb.hpp **** 
GAS LISTING /tmp/ccZwsoSP.s 			page 15


  11:src/../h/tcb.hpp **** // Thread Control Block
  12:src/../h/tcb.hpp **** class TCB
  13:src/../h/tcb.hpp **** {
  14:src/../h/tcb.hpp **** public:
  15:src/../h/tcb.hpp ****     ~TCB() { if (stack!= nullptr) delete[] stack; }
  16:src/../h/tcb.hpp **** 
  17:src/../h/tcb.hpp ****     bool isFinished() const { return finished; }
  18:src/../h/tcb.hpp **** 
  19:src/../h/tcb.hpp ****     void setFinished(bool value) { finished = value; }
  20:src/../h/tcb.hpp **** 
  21:src/../h/tcb.hpp ****     uint64 getTimeSlice() const { return timeSlice; }
 424              		.loc 3 21 35 is_stmt 1 discriminator 1
 425              		.loc 3 21 42 is_stmt 0 discriminator 1
 426 01cc 03378702 		ld	a4,40(a4)
 427              	.LVL21:
 428              	.LBE56:
 429              	.LBE55:
  90:src/riscv.cpp ****         if (TCB::running != nullptr && TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 430              		.loc 1 90 37 discriminator 1
 431 01d0 63F8E700 		bgeu	a5,a4,.L23
 432              	.L12:
  95:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 433              		.loc 1 95 9 is_stmt 1
 434              	.LVL22:
 435              	.LBB57:
 436              	.LBB58:
 144:src/../h/riscv.hpp **** }
 437              		.loc 2 144 5
 144:src/../h/riscv.hpp **** }
 438              		.loc 2 144 64 is_stmt 0
 439 01d4 93072000 		li	a5,2
 440              	#APP
 441              	# 144 "src/../h/riscv.hpp" 1
 145:src/../h/riscv.hpp **** 
 442              		csrc sip, a5
 443              	# 0 "" 2
 444              		.loc 2 145 1
 445              	#NO_APP
 446 01dc 6FF01FF6 		j	.L9
 447              	.LVL23:
 448              	.L23:
 449              	.LBE58:
 450              	.LBE57:
  92:src/riscv.cpp ****             TCB::timeSliceCounter=0;
 451              		.loc 1 92 13 is_stmt 1
  92:src/riscv.cpp ****             TCB::timeSliceCounter=0;
 452              		.loc 1 92 34 is_stmt 0
 453 01e0 97070000 		la	a5,_ZN3TCB16timeSliceCounterE
 453      83B70700 
 454 01e8 23B00700 		sd	zero,0(a5)
  93:src/riscv.cpp ****             TCB::dispatch();
 455              		.loc 1 93 13 is_stmt 1
  93:src/riscv.cpp ****             TCB::dispatch();
 456              		.loc 1 93 26 is_stmt 0
 457 01ec 97000000 		call	_ZN3TCB8dispatchEv@plt
 457      E7800000 
 458              	.LVL24:
GAS LISTING /tmp/ccZwsoSP.s 			page 16


 459 01f4 6FF01FFE 		j	.L12
 460              	.L18:
 101:src/riscv.cpp ****         console_handler();
 461              		.loc 1 101 9 is_stmt 1
 101:src/riscv.cpp ****         console_handler();
 462              		.loc 1 101 24 is_stmt 0
 463 01f8 97000000 		call	console_handler@plt
 463      E7800000 
 464              	.LVL25:
 465 0200 6FF0DFF3 		j	.L9
 466              	.LBE66:
 467              		.cfi_endproc
 468              	.LFE34:
 470              	.Letext0:
 471              		.file 4 "src/../h/../lib/hw.h"
 472              		.file 5 "src/../h/syscall_c.hpp"
 473              		.file 6 "src/../lib/mem.h"
 474              		.file 7 "src/../lib/console.h"
GAS LISTING /tmp/ccZwsoSP.s 			page 17


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/ccZwsoSP.s:9      .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/ccZwsoSP.s:13     .text:0000000000000000 .L0 
     /tmp/ccZwsoSP.s:14     .text:0000000000000000 .L0 
     /tmp/ccZwsoSP.s:15     .text:0000000000000004 .L0 
     /tmp/ccZwsoSP.s:17     .text:0000000000000008 .L0 
     /tmp/ccZwsoSP.s:19     .text:000000000000000c .L0 
     /tmp/ccZwsoSP.s:25     .text:000000000000000c .L0 
     /tmp/ccZwsoSP.s:26     .text:000000000000000c .L0 
     /tmp/ccZwsoSP.s:27     .text:000000000000000c .L0 
     /tmp/ccZwsoSP.s:37     .text:0000000000000014 .L0 
       src/riscv.cpp:16     .text:0000000000000014 .L0 
     /tmp/ccZwsoSP.s:43     .text:0000000000000018 .L0 
       src/riscv.cpp:17     .text:0000000000000018 .L0 
     /tmp/ccZwsoSP.s:49     .text:000000000000001c .L0 
     /tmp/ccZwsoSP.s:50     .text:0000000000000020 .L0 
     /tmp/ccZwsoSP.s:51     .text:0000000000000020 .L0 
     /tmp/ccZwsoSP.s:53     .text:0000000000000024 .L0 
     /tmp/ccZwsoSP.s:55     .text:0000000000000028 .L0 
     /tmp/ccZwsoSP.s:61     .text:0000000000000028 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/ccZwsoSP.s:64     .text:0000000000000028 .L0 
     /tmp/ccZwsoSP.s:65     .text:0000000000000028 .L0 
     /tmp/ccZwsoSP.s:66     .text:000000000000002c .L0 
     /tmp/ccZwsoSP.s:70     .text:0000000000000038 .L0 
     /tmp/ccZwsoSP.s:71     .text:0000000000000038 .L0 
     /tmp/ccZwsoSP.s:72     .text:0000000000000038 .L0 
     /tmp/ccZwsoSP.s:74     .text:000000000000003c .L0 
     /tmp/ccZwsoSP.s:78     .text:000000000000003c .L0 
     /tmp/ccZwsoSP.s:79     .text:000000000000003c .L0 
     /tmp/ccZwsoSP.s:80     .text:000000000000003c .L0 
  src/../h/riscv.hpp:104    .text:000000000000003c .L0 
     /tmp/ccZwsoSP.s:88     .text:0000000000000044 .L0 
     /tmp/ccZwsoSP.s:89     .text:0000000000000044 .L0 
     /tmp/ccZwsoSP.s:93     .text:0000000000000048 .L0 
     /tmp/ccZwsoSP.s:97     .text:000000000000004c .L0 
     /tmp/ccZwsoSP.s:98     .text:000000000000004c .L0 
     /tmp/ccZwsoSP.s:99     .text:000000000000004c .L0 
  src/../h/riscv.hpp:172    .text:000000000000004c .L0 
     /tmp/ccZwsoSP.s:107    .text:0000000000000054 .L0 
     /tmp/ccZwsoSP.s:108    .text:0000000000000054 .L0 
     /tmp/ccZwsoSP.s:112    .text:0000000000000058 .L0 
     /tmp/ccZwsoSP.s:116    .text:000000000000005c .L0 
     /tmp/ccZwsoSP.s:117    .text:000000000000005c .L0 
     /tmp/ccZwsoSP.s:118    .text:000000000000005c .L0 
  src/../h/riscv.hpp:92     .text:000000000000005c .L0 
     /tmp/ccZwsoSP.s:126    .text:0000000000000064 .L0 
     /tmp/ccZwsoSP.s:127    .text:0000000000000064 .L0 
     /tmp/ccZwsoSP.s:131    .text:0000000000000068 .L0 
     /tmp/ccZwsoSP.s:134    .text:000000000000006c .L0 
     /tmp/ccZwsoSP.s:135    .text:000000000000006c .L0 
     /tmp/ccZwsoSP.s:137    .text:0000000000000070 .L0 
     /tmp/ccZwsoSP.s:140    .text:0000000000000078 .L0 
     /tmp/ccZwsoSP.s:142    .text:000000000000007c .L0 
     /tmp/ccZwsoSP.s:145    .text:0000000000000084 .L0 
     /tmp/ccZwsoSP.s:146    .text:0000000000000084 .L0 
     /tmp/ccZwsoSP.s:148    .text:0000000000000088 .L0 
GAS LISTING /tmp/ccZwsoSP.s 			page 18


     /tmp/ccZwsoSP.s:153    .text:0000000000000098 .L0 
     /tmp/ccZwsoSP.s:154    .text:0000000000000098 .L0 
     /tmp/ccZwsoSP.s:156    .text:000000000000009c .L0 
     /tmp/ccZwsoSP.s:161    .text:00000000000000ac .L0 
     /tmp/ccZwsoSP.s:162    .text:00000000000000ac .L0 
     /tmp/ccZwsoSP.s:169    .text:00000000000000bc .L0 
     /tmp/ccZwsoSP.s:170    .text:00000000000000bc .L0 
     /tmp/ccZwsoSP.s:171    .text:00000000000000bc .L0 
     /tmp/ccZwsoSP.s:172    .text:00000000000000bc .L0 
     /tmp/ccZwsoSP.s:173    .text:00000000000000bc .L0 
       src/riscv.cpp:33     .text:00000000000000bc .L0 
     /tmp/ccZwsoSP.s:181    .text:00000000000000c4 .L0 
       src/riscv.cpp:34     .text:00000000000000c4 .L0 
     /tmp/ccZwsoSP.s:189    .text:00000000000000cc .L0 
       src/riscv.cpp:35     .text:00000000000000cc .L0 
     /tmp/ccZwsoSP.s:197    .text:00000000000000d4 .L0 
       src/riscv.cpp:36     .text:00000000000000d4 .L0 
     /tmp/ccZwsoSP.s:205    .text:00000000000000dc .L0 
     /tmp/ccZwsoSP.s:206    .text:00000000000000dc .L0 
     /tmp/ccZwsoSP.s:208    .text:00000000000000e0 .L0 
     /tmp/ccZwsoSP.s:210    .text:00000000000000e4 .L0 
     /tmp/ccZwsoSP.s:212    .text:00000000000000e8 .L0 
     /tmp/ccZwsoSP.s:213    .text:00000000000000e8 .L0 
     /tmp/ccZwsoSP.s:215    .text:00000000000000e8 .L0 
     /tmp/ccZwsoSP.s:216    .text:00000000000000e8 .L0 
     /tmp/ccZwsoSP.s:218    .text:00000000000000ec .L0 
     /tmp/ccZwsoSP.s:228    .text:00000000000000f4 .L0 
     /tmp/ccZwsoSP.s:229    .text:00000000000000f4 .L0 
     /tmp/ccZwsoSP.s:231    .text:00000000000000f8 .L0 
     /tmp/ccZwsoSP.s:243    .text:0000000000000100 .L0 
     /tmp/ccZwsoSP.s:244    .text:0000000000000100 .L0 
     /tmp/ccZwsoSP.s:246    .text:0000000000000104 .L0 
     /tmp/ccZwsoSP.s:260    .text:000000000000010c .L0 
     /tmp/ccZwsoSP.s:261    .text:000000000000010c .L0 
     /tmp/ccZwsoSP.s:263    .text:0000000000000110 .L0 
     /tmp/ccZwsoSP.s:267    .text:0000000000000118 .L0 
     /tmp/ccZwsoSP.s:268    .text:0000000000000118 .L0 
     /tmp/ccZwsoSP.s:271    .text:000000000000011c .L0 
     /tmp/ccZwsoSP.s:272    .text:000000000000011c .L0 
     /tmp/ccZwsoSP.s:275    .text:0000000000000124 .L0 
       src/riscv.cpp:72     .text:0000000000000124 .L0 
     /tmp/ccZwsoSP.s:289    .text:000000000000012c .L0 
     /tmp/ccZwsoSP.s:290    .text:000000000000012c .L0 
     /tmp/ccZwsoSP.s:293    .text:0000000000000130 .L0 
     /tmp/ccZwsoSP.s:295    .text:0000000000000134 .L0 
     /tmp/ccZwsoSP.s:299    .text:0000000000000138 .L0 
       src/riscv.cpp:57     .text:0000000000000138 .L0 
     /tmp/ccZwsoSP.s:311    .text:000000000000013c .L0 
     /tmp/ccZwsoSP.s:312    .text:000000000000013c .L0 
     /tmp/ccZwsoSP.s:317    .text:0000000000000140 .L0 
  src/../h/riscv.hpp:110    .text:0000000000000140 .L0 
     /tmp/ccZwsoSP.s:327    .text:0000000000000144 .L0 
     /tmp/ccZwsoSP.s:328    .text:0000000000000144 .L0 
     /tmp/ccZwsoSP.s:333    .text:0000000000000148 .L0 
  src/../h/riscv.hpp:178    .text:0000000000000148 .L0 
     /tmp/ccZwsoSP.s:343    .text:000000000000014c .L0 
     /tmp/ccZwsoSP.s:344    .text:0000000000000150 .L0 
GAS LISTING /tmp/ccZwsoSP.s 			page 19


     /tmp/ccZwsoSP.s:345    .text:0000000000000150 .L0 
     /tmp/ccZwsoSP.s:347    .text:0000000000000154 .L0 
     /tmp/ccZwsoSP.s:348    .text:0000000000000154 .L0 
     /tmp/ccZwsoSP.s:350    .text:0000000000000158 .L0 
     /tmp/ccZwsoSP.s:352    .text:000000000000015c .L0 
     /tmp/ccZwsoSP.s:356    .text:0000000000000160 .L0 
     /tmp/ccZwsoSP.s:361    .text:0000000000000160 .L0 
     /tmp/ccZwsoSP.s:362    .text:0000000000000160 .L0 
     /tmp/ccZwsoSP.s:367    .text:0000000000000170 .L0 
     /tmp/ccZwsoSP.s:370    .text:0000000000000174 .L0 
     /tmp/ccZwsoSP.s:371    .text:0000000000000174 .L0 
     /tmp/ccZwsoSP.s:377    .text:000000000000017c .L0 
     /tmp/ccZwsoSP.s:378    .text:000000000000017c .L0 
     /tmp/ccZwsoSP.s:381    .text:0000000000000188 .L0 
     /tmp/ccZwsoSP.s:382    .text:0000000000000188 .L0 
     /tmp/ccZwsoSP.s:389    .text:0000000000000194 .L0 
     /tmp/ccZwsoSP.s:390    .text:0000000000000194 .L0 
     /tmp/ccZwsoSP.s:394    .text:00000000000001a0 .L0 
       src/riscv.cpp:67     .text:00000000000001a0 .L0 
     /tmp/ccZwsoSP.s:409    .text:00000000000001a8 .L0 
     /tmp/ccZwsoSP.s:410    .text:00000000000001a8 .L0 
     /tmp/ccZwsoSP.s:415    .text:00000000000001bc .L0 
     /tmp/ccZwsoSP.s:416    .text:00000000000001bc .L0 
     /tmp/ccZwsoSP.s:419    .text:00000000000001c8 .L0 
     /tmp/ccZwsoSP.s:425    .text:00000000000001cc .L0 
     /tmp/ccZwsoSP.s:426    .text:00000000000001cc .L0 
     /tmp/ccZwsoSP.s:431    .text:00000000000001d0 .L0 
     /tmp/ccZwsoSP.s:437    .text:00000000000001d4 .L0 
     /tmp/ccZwsoSP.s:438    .text:00000000000001d4 .L0 
     /tmp/ccZwsoSP.s:439    .text:00000000000001d4 .L0 
     /tmp/ccZwsoSP.s:446    .text:00000000000001dc .L0 
     /tmp/ccZwsoSP.s:452    .text:00000000000001e0 .L0 
     /tmp/ccZwsoSP.s:453    .text:00000000000001e0 .L0 
     /tmp/ccZwsoSP.s:456    .text:00000000000001ec .L0 
     /tmp/ccZwsoSP.s:457    .text:00000000000001ec .L0 
     /tmp/ccZwsoSP.s:462    .text:00000000000001f8 .L0 
     /tmp/ccZwsoSP.s:463    .text:00000000000001f8 .L0 
     /tmp/ccZwsoSP.s:467    .text:0000000000000204 .L0 
     /tmp/ccZwsoSP.s:475    .text:0000000000000204 .L0 
     /tmp/ccZwsoSP.s:378    .text:000000000000017c .L0 
     /tmp/ccZwsoSP.s:410    .text:00000000000001a8 .L0 
     /tmp/ccZwsoSP.s:416    .text:00000000000001bc .L0 
     /tmp/ccZwsoSP.s:453    .text:00000000000001e0 .L0 
     /tmp/ccZwsoSP.s:166    .text:00000000000000bc .L4
     /tmp/ccZwsoSP.s:403    .text:00000000000001a8 .L17
     /tmp/ccZwsoSP.s:460    .text:00000000000001f8 .L18
     /tmp/ccZwsoSP.s:306    .text:000000000000013c .L9
     /tmp/ccZwsoSP.s:284    .text:000000000000012c .L19
     /tmp/ccZwsoSP.s:374    .text:000000000000017c .L20
     /tmp/ccZwsoSP.s:385    .text:0000000000000194 .L21
     /tmp/ccZwsoSP.s:355    .text:0000000000000160 .L22
     /tmp/ccZwsoSP.s:296    .text:0000000000000138 .L8
     /tmp/ccZwsoSP.s:432    .text:00000000000001d4 .L12
     /tmp/ccZwsoSP.s:448    .text:00000000000001e0 .L23
     /tmp/ccZwsoSP.s:1516   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccZwsoSP.s:2704   .debug_str:000000000000057f .LASF109
     /tmp/ccZwsoSP.s:2650   .debug_str:0000000000000406 .LASF110
GAS LISTING /tmp/ccZwsoSP.s 			page 20


     /tmp/ccZwsoSP.s:2566   .debug_str:00000000000001cc .LASF111
     /tmp/ccZwsoSP.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccZwsoSP.s:470    .text:0000000000000204 .Letext0
     /tmp/ccZwsoSP.s:2494   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccZwsoSP.s:2630   .debug_str:000000000000039a .LASF0
     /tmp/ccZwsoSP.s:2646   .debug_str:00000000000003e0 .LASF1
     /tmp/ccZwsoSP.s:2618   .debug_str:000000000000033e .LASF2
     /tmp/ccZwsoSP.s:2548   .debug_str:000000000000014e .LASF3
     /tmp/ccZwsoSP.s:2594   .debug_str:00000000000002ac .LASF4
     /tmp/ccZwsoSP.s:2682   .debug_str:00000000000004e8 .LASF5
     /tmp/ccZwsoSP.s:2520   .debug_str:0000000000000082 .LASF6
     /tmp/ccZwsoSP.s:2648   .debug_str:00000000000003f3 .LASF7
     /tmp/ccZwsoSP.s:2628   .debug_str:0000000000000387 .LASF8
     /tmp/ccZwsoSP.s:2708   .debug_str:0000000000000652 .LASF9
     /tmp/ccZwsoSP.s:2582   .debug_str:0000000000000231 .LASF10
     /tmp/ccZwsoSP.s:2658   .debug_str:0000000000000453 .LASF11
     /tmp/ccZwsoSP.s:2706   .debug_str:0000000000000643 .LASF12
     /tmp/ccZwsoSP.s:2526   .debug_str:00000000000000a0 .LASF13
     /tmp/ccZwsoSP.s:2502   .debug_str:0000000000000027 .LASF14
     /tmp/ccZwsoSP.s:2534   .debug_str:00000000000000ea .LASF15
     /tmp/ccZwsoSP.s:2676   .debug_str:00000000000004b4 .LASF16
     /tmp/ccZwsoSP.s:2542   .debug_str:0000000000000115 .LASF17
     /tmp/ccZwsoSP.s:2642   .debug_str:00000000000003cf .LASF62
     /tmp/ccZwsoSP.s:2606   .debug_str:00000000000002f4 .LASF21
     /tmp/ccZwsoSP.s:2692   .debug_str:000000000000052b .LASF18
     /tmp/ccZwsoSP.s:2640   .debug_str:00000000000003c6 .LASF19
     /tmp/ccZwsoSP.s:2600   .debug_str:00000000000002c1 .LASF20
     /tmp/ccZwsoSP.s:2546   .debug_str:000000000000013f .LASF22
     /tmp/ccZwsoSP.s:2538   .debug_str:00000000000000fc .LASF23
     /tmp/ccZwsoSP.s:2608   .debug_str:00000000000002ff .LASF24
     /tmp/ccZwsoSP.s:2522   .debug_str:0000000000000089 .LASF25
     /tmp/ccZwsoSP.s:2672   .debug_str:00000000000004a2 .LASF58
     /tmp/ccZwsoSP.s:2724   .debug_str:00000000000006cd .LASF60
     /tmp/ccZwsoSP.s:2504   .debug_str:0000000000000037 .LASF26
     /tmp/ccZwsoSP.s:2558   .debug_str:000000000000018b .LASF28
     /tmp/ccZwsoSP.s:2554   .debug_str:000000000000017a .LASF30
     /tmp/ccZwsoSP.s:2552   .debug_str:0000000000000165 .LASF32
     /tmp/ccZwsoSP.s:2686   .debug_str:000000000000050b .LASF27
     /tmp/ccZwsoSP.s:2662   .debug_str:000000000000046d .LASF29
     /tmp/ccZwsoSP.s:2702   .debug_str:0000000000000578 .LASF31
     /tmp/ccZwsoSP.s:2698   .debug_str:0000000000000553 .LASF33
     /tmp/ccZwsoSP.s:2570   .debug_str:00000000000001fd .LASF34
     /tmp/ccZwsoSP.s:2544   .debug_str:000000000000012b .LASF35
     /tmp/ccZwsoSP.s:2498   .debug_str:0000000000000009 .LASF36
     /tmp/ccZwsoSP.s:2586   .debug_str:0000000000000255 .LASF37
     /tmp/ccZwsoSP.s:2518   .debug_str:000000000000007a .LASF38
     /tmp/ccZwsoSP.s:2528   .debug_str:00000000000000b0 .LASF39
     /tmp/ccZwsoSP.s:2728   .debug_str:00000000000006f0 .LASF40
     /tmp/ccZwsoSP.s:2560   .debug_str:00000000000001a0 .LASF41
     /tmp/ccZwsoSP.s:2632   .debug_str:00000000000003a7 .LASF42
     /tmp/ccZwsoSP.s:2720   .debug_str:00000000000006b5 .LASF43
     /tmp/ccZwsoSP.s:2514   .debug_str:000000000000005a .LASF44
     /tmp/ccZwsoSP.s:2568   .debug_str:00000000000001ea .LASF45
     /tmp/ccZwsoSP.s:2578   .debug_str:0000000000000214 .LASF46
     /tmp/ccZwsoSP.s:2700   .debug_str:0000000000000566 .LASF47
     /tmp/ccZwsoSP.s:2510   .debug_str:000000000000004f .LASF48
     /tmp/ccZwsoSP.s:2734   .debug_str:0000000000000714 .LASF49
GAS LISTING /tmp/ccZwsoSP.s 			page 21


     /tmp/ccZwsoSP.s:2726   .debug_str:00000000000006e5 .LASF50
     /tmp/ccZwsoSP.s:2680   .debug_str:00000000000004d0 .LASF51
     /tmp/ccZwsoSP.s:2644   .debug_str:00000000000003d5 .LASF52
     /tmp/ccZwsoSP.s:2694   .debug_str:0000000000000534 .LASF53
     /tmp/ccZwsoSP.s:2532   .debug_str:00000000000000e0 .LASF54
     /tmp/ccZwsoSP.s:2590   .debug_str:000000000000026e .LASF55
     /tmp/ccZwsoSP.s:2622   .debug_str:0000000000000358 .LASF56
     /tmp/ccZwsoSP.s:2584   .debug_str:000000000000023f .LASF57
     /tmp/ccZwsoSP.s:2688   .debug_str:0000000000000512 .LASF59
     /tmp/ccZwsoSP.s:2530   .debug_str:00000000000000c4 .LASF61
     /tmp/ccZwsoSP.s:2712   .debug_str:000000000000066e .LASF80
     /tmp/ccZwsoSP.s:2604   .debug_str:00000000000002d2 .LASF82
     /tmp/ccZwsoSP.s:2508   .debug_str:0000000000000047 .LASF112
     /tmp/ccZwsoSP.s:2588   .debug_str:0000000000000269 .LASF63
     /tmp/ccZwsoSP.s:2664   .debug_str:0000000000000480 .LASF65
     /tmp/ccZwsoSP.s:2652   .debug_str:0000000000000414 .LASF67
     /tmp/ccZwsoSP.s:2580   .debug_str:000000000000021a .LASF69
     /tmp/ccZwsoSP.s:2620   .debug_str:000000000000034c .LASF64
     /tmp/ccZwsoSP.s:2730   .debug_str:00000000000006f8 .LASF66
     /tmp/ccZwsoSP.s:2614   .debug_str:0000000000000323 .LASF68
     /tmp/ccZwsoSP.s:2516   .debug_str:0000000000000061 .LASF70
     /tmp/ccZwsoSP.s:2540   .debug_str:0000000000000108 .LASF71
     /tmp/ccZwsoSP.s:2654   .debug_str:000000000000041f .LASF72
     /tmp/ccZwsoSP.s:2668   .debug_str:0000000000000494 .LASF113
     /tmp/ccZwsoSP.s:2678   .debug_str:00000000000004ca .LASF73
     /tmp/ccZwsoSP.s:2624   .debug_str:0000000000000362 .LASF74
     /tmp/ccZwsoSP.s:2556   .debug_str:0000000000000183 .LASF114
     /tmp/ccZwsoSP.s:2626   .debug_str:0000000000000372 .LASF115
     /tmp/ccZwsoSP.s:2598   .debug_str:00000000000002bc .LASF75
     /tmp/ccZwsoSP.s:2536   .debug_str:00000000000000f6 .LASF76
     /tmp/ccZwsoSP.s:2602   .debug_str:00000000000002ca .LASF77
     /tmp/ccZwsoSP.s:2638   .debug_str:00000000000003bc .LASF78
     /tmp/ccZwsoSP.s:2596   .debug_str:00000000000002b3 .LASF79
     /tmp/ccZwsoSP.s:2616   .debug_str:0000000000000330 .LASF81
     /tmp/ccZwsoSP.s:2716   .debug_str:0000000000000691 .LASF83
     /tmp/ccZwsoSP.s:2714   .debug_str:0000000000000683 .LASF116
     /tmp/ccZwsoSP.s:2592   .debug_str:0000000000000284 .LASF117
     /tmp/ccZwsoSP.s:2634   .debug_str:00000000000003ae .LASF84
     /tmp/ccZwsoSP.s:2562   .debug_str:00000000000001b4 .LASF85
     /tmp/ccZwsoSP.s:2684   .debug_str:00000000000004fa .LASF118
     /tmp/ccZwsoSP.s:2524   .debug_str:0000000000000095 .LASF86
     /tmp/ccZwsoSP.s:2718   .debug_str:00000000000006aa .LASF87
     /tmp/ccZwsoSP.s:2564   .debug_str:00000000000001c7 .LASF88
     /tmp/ccZwsoSP.s:2690   .debug_str:0000000000000521 .LASF89
     /tmp/ccZwsoSP.s:2670   .debug_str:0000000000000499 .LASF90
     /tmp/ccZwsoSP.s:2656   .debug_str:000000000000043f .LASF91
     /tmp/ccZwsoSP.s:2610   .debug_str:000000000000030c .LASF92
     /tmp/ccZwsoSP.s:2500   .debug_str:0000000000000011 .LASF93
     /tmp/ccZwsoSP.s:2496   .debug_str:0000000000000000 .LASF94
     /tmp/ccZwsoSP.s:62     .text:0000000000000028 .LFB34
     /tmp/ccZwsoSP.s:468    .text:0000000000000204 .LFE34
     /tmp/ccZwsoSP.s:2636   .debug_str:00000000000003b7 .LASF95
     /tmp/ccZwsoSP.s:2666   .debug_str:000000000000048c .LASF96
     /tmp/ccZwsoSP.s:2506   .debug_str:0000000000000040 .LASF97
     /tmp/ccZwsoSP.s:2480   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccZwsoSP.s:2512   .debug_str:0000000000000055 .LASF98
     /tmp/ccZwsoSP.s:2572   .debug_str:0000000000000205 .LASF99
GAS LISTING /tmp/ccZwsoSP.s 			page 22


     /tmp/ccZwsoSP.s:2574   .debug_str:000000000000020a .LASF100
     /tmp/ccZwsoSP.s:2576   .debug_str:000000000000020f .LASF101
     /tmp/ccZwsoSP.s:2612   .debug_str:000000000000031e .LASF102
     /tmp/ccZwsoSP.s:2388   .debug_loc:0000000000000000 .LLST1
     /tmp/ccZwsoSP.s:2696   .debug_str:000000000000054c .LASF103
     /tmp/ccZwsoSP.s:2404   .debug_loc:000000000000004a .LLST2
     /tmp/ccZwsoSP.s:387    .text:0000000000000194 .LBB41
     /tmp/ccZwsoSP.s:400    .text:00000000000001a4 .LBE41
     /tmp/ccZwsoSP.s:2415   .debug_loc:0000000000000080 .LLST4
     /tmp/ccZwsoSP.s:392    .text:00000000000001a0 .LVL18
     /tmp/ccZwsoSP.s:265    .text:0000000000000118 .LBB40
     /tmp/ccZwsoSP.s:281    .text:0000000000000128 .LBE40
     /tmp/ccZwsoSP.s:2422   .debug_loc:00000000000000a3 .LLST3
     /tmp/ccZwsoSP.s:273    .text:0000000000000124 .LVL4
     /tmp/ccZwsoSP.s:365    .text:0000000000000170 .LVL14
     /tmp/ccZwsoSP.s:383    .text:0000000000000190 .LVL17
     /tmp/ccZwsoSP.s:76     .text:000000000000003c .LBB28
     /tmp/ccZwsoSP.s:91     .text:0000000000000048 .LBE28
     /tmp/ccZwsoSP.s:95     .text:000000000000004c .LBB30
     /tmp/ccZwsoSP.s:110    .text:0000000000000058 .LBE30
     /tmp/ccZwsoSP.s:114    .text:000000000000005c .LBB32
     /tmp/ccZwsoSP.s:129    .text:0000000000000068 .LBE32
     /tmp/ccZwsoSP.s:421    .text:00000000000001cc .LBB55
     /tmp/ccZwsoSP.s:429    .text:00000000000001d0 .LBE55
     /tmp/ccZwsoSP.s:2429   .debug_loc:00000000000000c6 .LLST5
     /tmp/ccZwsoSP.s:435    .text:00000000000001d4 .LBB57
     /tmp/ccZwsoSP.s:450    .text:00000000000001e0 .LBE57
     /tmp/ccZwsoSP.s:2436   .debug_loc:00000000000000e9 .LLST6
     /tmp/ccZwsoSP.s:314    .text:0000000000000140 .LBB62
     /tmp/ccZwsoSP.s:325    .text:0000000000000144 .LBE62
     /tmp/ccZwsoSP.s:2444   .debug_loc:000000000000010d .LLST7
     /tmp/ccZwsoSP.s:330    .text:0000000000000148 .LBB64
     /tmp/ccZwsoSP.s:341    .text:000000000000014c .LBE64
     /tmp/ccZwsoSP.s:2451   .debug_loc:0000000000000130 .LLST8
     /tmp/ccZwsoSP.s:164    .text:00000000000000b8 .LVL2
     /tmp/ccZwsoSP.s:458    .text:00000000000001f4 .LVL24
     /tmp/ccZwsoSP.s:464    .text:0000000000000200 .LVL25
     /tmp/ccZwsoSP.s:10     .text:0000000000000000 .LFB33
     /tmp/ccZwsoSP.s:56     .text:0000000000000028 .LFE33
     /tmp/ccZwsoSP.s:22     .text:000000000000000c .LBB26
     /tmp/ccZwsoSP.s:35     .text:0000000000000014 .LBE26
     /tmp/ccZwsoSP.s:2458   .debug_loc:0000000000000153 .LLST0
     /tmp/ccZwsoSP.s:2722   .debug_str:00000000000006c8 .LASF119
     /tmp/ccZwsoSP.s:2732   .debug_str:000000000000070f .LASF104
     /tmp/ccZwsoSP.s:2710   .debug_str:0000000000000662 .LASF105
     /tmp/ccZwsoSP.s:2660   .debug_str:0000000000000462 .LASF106
     /tmp/ccZwsoSP.s:2674   .debug_str:00000000000004ad .LASF107
     /tmp/ccZwsoSP.s:2550   .debug_str:0000000000000155 .LASF108
     /tmp/ccZwsoSP.s:283    .text:000000000000012c .LVL5
     /tmp/ccZwsoSP.s:297    .text:0000000000000138 .LVL7
     /tmp/ccZwsoSP.s:304    .text:000000000000013c .LVL8
     /tmp/ccZwsoSP.s:369    .text:0000000000000174 .LVL15
     /tmp/ccZwsoSP.s:373    .text:000000000000017c .LVL16
     /tmp/ccZwsoSP.s:291    .text:0000000000000130 .LVL6
     /tmp/ccZwsoSP.s:354    .text:0000000000000160 .LVL13
     /tmp/ccZwsoSP.s:402    .text:00000000000001a8 .LVL19
     /tmp/ccZwsoSP.s:269    .text:000000000000011c .LVL3
GAS LISTING /tmp/ccZwsoSP.s 			page 23


     /tmp/ccZwsoSP.s:420    .text:00000000000001cc .LVL20
     /tmp/ccZwsoSP.s:427    .text:00000000000001d0 .LVL21
     /tmp/ccZwsoSP.s:434    .text:00000000000001d4 .LVL22
     /tmp/ccZwsoSP.s:447    .text:00000000000001e0 .LVL23
     /tmp/ccZwsoSP.s:313    .text:0000000000000140 .LVL9
     /tmp/ccZwsoSP.s:322    .text:0000000000000144 .LVL10
     /tmp/ccZwsoSP.s:329    .text:0000000000000148 .LVL11
     /tmp/ccZwsoSP.s:338    .text:000000000000014c .LVL12
     /tmp/ccZwsoSP.s:21     .text:000000000000000c .LVL0
     /tmp/ccZwsoSP.s:32     .text:0000000000000014 .LVL1
     /tmp/ccZwsoSP.s:476    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccZwsoSP.s:167    .text:00000000000000bc .LBB35
     /tmp/ccZwsoSP.s:221    .text:00000000000000f4 .LBE35
     /tmp/ccZwsoSP.s:225    .text:00000000000000f4 .LBB51
     /tmp/ccZwsoSP.s:235    .text:0000000000000100 .LBE51
     /tmp/ccZwsoSP.s:239    .text:0000000000000100 .LBB52
     /tmp/ccZwsoSP.s:251    .text:000000000000010c .LBE52
     /tmp/ccZwsoSP.s:255    .text:000000000000010c .LBB53
     /tmp/ccZwsoSP.s:308    .text:000000000000013c .LBE53
     /tmp/ccZwsoSP.s:358    .text:0000000000000160 .LBB54
     /tmp/ccZwsoSP.s:407    .text:00000000000001a8 .LBE54

UNDEFINED SYMBOLS
__putc
__mem_free
_ZN3TCB12createThreadEPFvPvES0_
_ZN3TCB16timeSliceCounterE
_ZN3TCB8dispatchEv
__mem_alloc
_ZN3TCB7runningE
console_handler
