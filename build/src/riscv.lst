GAS LISTING /tmp/cclvbR5S.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv10popSppSpieEv
   9              	_ZN5Riscv10popSppSpieEv:
  10              	.LFB33:
  11              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** //
   2:src/riscv.cpp **** // Created by marko on 20.4.22..
   3:src/riscv.cpp **** //
   4:src/riscv.cpp **** 
   5:src/riscv.cpp **** #include "../h/riscv.hpp"
   6:src/riscv.cpp **** #include "../h/tcb.hpp"
   7:src/riscv.cpp **** #include "../lib/console.h"
   8:src/riscv.cpp **** #include "../h/syscall_c.hpp"
   9:src/riscv.cpp **** void Riscv::popSppSpie()
  10:src/riscv.cpp **** {
  12              		.loc 1 10 1
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  11:src/riscv.cpp ****     __asm__ volatile("csrw sepc, ra");
  20              		.loc 1 11 5
  21              		.loc 1 11 38 is_stmt 0
  22              	#APP
  23              	# 11 "src/riscv.cpp" 1
  12              	    __asm__ volatile("sret");
  24              		csrw sepc, ra
  25              	# 0 "" 2
  26              		.loc 1 12 5 is_stmt 1
  27              		.loc 1 12 29 is_stmt 0
  28              	# 12 "src/riscv.cpp" 1
  13              	}
  29              		sret
  30              	# 0 "" 2
  31              		.loc 1 13 1
  32              	#NO_APP
  33 0014 03348100 		ld	s0,8(sp)
  34              		.cfi_restore 8
  35              		.cfi_def_cfa 2, 16
  36 0018 13010101 		addi	sp,sp,16
  37              		.cfi_def_cfa_offset 0
  38 001c 67800000 		jr	ra
  39              		.cfi_endproc
  40              	.LFE33:
  42              		.align	2
  43              		.globl	_ZN5Riscv20handleSupervisorTrapEv
  45              	_ZN5Riscv20handleSupervisorTrapEv:
  46              	.LFB34:
  14:src/riscv.cpp **** 
GAS LISTING /tmp/cclvbR5S.s 			page 2


  15:src/riscv.cpp **** void Riscv::handleSupervisorTrap()
  16:src/riscv.cpp **** {
  47              		.loc 1 16 1 is_stmt 1
  48              		.cfi_startproc
  49 0020 130101FB 		addi	sp,sp,-80
  50              		.cfi_def_cfa_offset 80
  51 0024 23341104 		sd	ra,72(sp)
  52 0028 23308104 		sd	s0,64(sp)
  53 002c 233C9102 		sd	s1,56(sp)
  54              		.cfi_offset 1, -8
  55              		.cfi_offset 8, -16
  56              		.cfi_offset 9, -24
  57 0030 13040105 		addi	s0,sp,80
  58              		.cfi_def_cfa 8, 0
  17:src/riscv.cpp ****     uint64 volatile sepc = r_sepc();
  59              		.loc 1 17 5
  60              	.LBB18:
  61              	.LBB19:
  62              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by marko on 20.4.22..
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   6:src/../h/riscv.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/riscv.hpp **** 
  10:src/../h/riscv.hpp **** class Riscv
  11:src/../h/riscv.hpp **** {
  12:src/../h/riscv.hpp **** public:
  13:src/../h/riscv.hpp **** 
  14:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  15:src/../h/riscv.hpp ****     static void popSppSpie();
  16:src/../h/riscv.hpp **** 
  17:src/../h/riscv.hpp ****     // read register scause
  18:src/../h/riscv.hpp ****     static uint64 r_scause();
  19:src/../h/riscv.hpp **** 
  20:src/../h/riscv.hpp ****     // write register scause
  21:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  22:src/../h/riscv.hpp **** 
  23:src/../h/riscv.hpp ****     // read register sepc
  24:src/../h/riscv.hpp ****     static uint64 r_sepc();
  25:src/../h/riscv.hpp **** 
  26:src/../h/riscv.hpp ****     // write register sepc
  27:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  28:src/../h/riscv.hpp **** 
  29:src/../h/riscv.hpp ****     // read register stvec
  30:src/../h/riscv.hpp ****     static uint64 r_stvec();
  31:src/../h/riscv.hpp **** 
  32:src/../h/riscv.hpp ****     // write register stvec
  33:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  34:src/../h/riscv.hpp **** 
  35:src/../h/riscv.hpp ****     // read register stval
  36:src/../h/riscv.hpp ****     static uint64 r_stval();
  37:src/../h/riscv.hpp **** 
  38:src/../h/riscv.hpp ****     // write register stval
GAS LISTING /tmp/cclvbR5S.s 			page 3


  39:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  40:src/../h/riscv.hpp **** 
  41:src/../h/riscv.hpp ****     enum BitMaskSip
  42:src/../h/riscv.hpp ****     {
  43:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  44:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  45:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  46:src/../h/riscv.hpp ****     };
  47:src/../h/riscv.hpp **** 
  48:src/../h/riscv.hpp ****     // mask set register sip
  49:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  50:src/../h/riscv.hpp **** 
  51:src/../h/riscv.hpp ****     // mask clear register sip
  52:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  53:src/../h/riscv.hpp **** 
  54:src/../h/riscv.hpp ****     // read register sip
  55:src/../h/riscv.hpp ****     static uint64 r_sip();
  56:src/../h/riscv.hpp **** 
  57:src/../h/riscv.hpp ****     // write register sip
  58:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  59:src/../h/riscv.hpp **** 
  60:src/../h/riscv.hpp ****     enum BitMaskSstatus
  61:src/../h/riscv.hpp ****     {
  62:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  63:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  64:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  65:src/../h/riscv.hpp ****     };
  66:src/../h/riscv.hpp **** 
  67:src/../h/riscv.hpp ****     // mask set register sstatus
  68:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  69:src/../h/riscv.hpp **** 
  70:src/../h/riscv.hpp ****     // mask clear register sstatus
  71:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  72:src/../h/riscv.hpp **** 
  73:src/../h/riscv.hpp ****     // read register sstatus
  74:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  75:src/../h/riscv.hpp **** 
  76:src/../h/riscv.hpp ****     // write register sstatus
  77:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  78:src/../h/riscv.hpp **** 
  79:src/../h/riscv.hpp ****     // supervisor trap
  80:src/../h/riscv.hpp ****     static void supervisorTrap();
  81:src/../h/riscv.hpp **** 
  82:src/../h/riscv.hpp **** private:
  83:src/../h/riscv.hpp **** 
  84:src/../h/riscv.hpp ****     // supervisor trap handler
  85:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
  86:src/../h/riscv.hpp **** 
  87:src/../h/riscv.hpp **** };
  88:src/../h/riscv.hpp **** 
  89:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
  90:src/../h/riscv.hpp **** {
  91:src/../h/riscv.hpp ****     uint64 volatile scause;
  92:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  93:src/../h/riscv.hpp ****     return scause;
  94:src/../h/riscv.hpp **** }
  95:src/../h/riscv.hpp **** 
GAS LISTING /tmp/cclvbR5S.s 			page 4


  96:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
  97:src/../h/riscv.hpp **** {
  98:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
  99:src/../h/riscv.hpp **** }
 100:src/../h/riscv.hpp **** 
 101:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 102:src/../h/riscv.hpp **** {
 103:src/../h/riscv.hpp ****     uint64 volatile sepc;
  63              		.loc 2 103 5
 104:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
  64              		.loc 2 104 5
  65              		.loc 2 104 64 is_stmt 0
  66              	#APP
  67              	# 104 "src/../h/riscv.hpp" 1
 105              	    return sepc;
  68              		csrr a5, sepc
  69              	# 0 "" 2
  70              	#NO_APP
  71 0038 2330F4FC 		sd	a5,-64(s0)
  72              		.loc 2 105 5 is_stmt 1
  73              		.loc 2 105 12 is_stmt 0
  74 003c 833704FC 		ld	a5,-64(s0)
  75              	.LBE19:
  76              	.LBE18:
  77              		.loc 1 17 35
  78 0040 233CF4FC 		sd	a5,-40(s0)
  18:src/riscv.cpp ****     uint64 volatile sstatus= r_sstatus();
  79              		.loc 1 18 5 is_stmt 1
  80              	.LBB20:
  81              	.LBB21:
 106:src/../h/riscv.hpp **** }
 107:src/../h/riscv.hpp **** 
 108:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 109:src/../h/riscv.hpp **** {
 110:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 111:src/../h/riscv.hpp **** }
 112:src/../h/riscv.hpp **** 
 113:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 114:src/../h/riscv.hpp **** {
 115:src/../h/riscv.hpp ****     uint64 volatile stvec;
 116:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 117:src/../h/riscv.hpp ****     return stvec;
 118:src/../h/riscv.hpp **** }
 119:src/../h/riscv.hpp **** 
 120:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 121:src/../h/riscv.hpp **** {
 122:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 123:src/../h/riscv.hpp **** }
 124:src/../h/riscv.hpp **** 
 125:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 126:src/../h/riscv.hpp **** {
 127:src/../h/riscv.hpp ****     uint64 volatile stval;
 128:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 129:src/../h/riscv.hpp ****     return stval;
 130:src/../h/riscv.hpp **** }
 131:src/../h/riscv.hpp **** 
 132:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
GAS LISTING /tmp/cclvbR5S.s 			page 5


 133:src/../h/riscv.hpp **** {
 134:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 135:src/../h/riscv.hpp **** }
 136:src/../h/riscv.hpp **** 
 137:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 138:src/../h/riscv.hpp **** {
 139:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 140:src/../h/riscv.hpp **** }
 141:src/../h/riscv.hpp **** 
 142:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 143:src/../h/riscv.hpp **** {
 144:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 145:src/../h/riscv.hpp **** }
 146:src/../h/riscv.hpp **** 
 147:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 148:src/../h/riscv.hpp **** {
 149:src/../h/riscv.hpp ****     uint64 volatile sip;
 150:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 151:src/../h/riscv.hpp ****     return sip;
 152:src/../h/riscv.hpp **** }
 153:src/../h/riscv.hpp **** 
 154:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 155:src/../h/riscv.hpp **** {
 156:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 157:src/../h/riscv.hpp **** }
 158:src/../h/riscv.hpp **** 
 159:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 160:src/../h/riscv.hpp **** {
 161:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 162:src/../h/riscv.hpp **** }
 163:src/../h/riscv.hpp **** 
 164:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 165:src/../h/riscv.hpp **** {
 166:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 167:src/../h/riscv.hpp **** }
 168:src/../h/riscv.hpp **** 
 169:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 170:src/../h/riscv.hpp **** {
 171:src/../h/riscv.hpp ****     uint64 volatile sstatus;
  82              		.loc 2 171 5
 172:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
  83              		.loc 2 172 5
  84              		.loc 2 172 76 is_stmt 0
  85              	#APP
  86              	# 172 "src/../h/riscv.hpp" 1
 173              	    return sstatus;
  87              		csrr a5, sstatus
  88              	# 0 "" 2
  89              	#NO_APP
  90 0048 233CF4FA 		sd	a5,-72(s0)
  91              		.loc 2 173 5 is_stmt 1
  92              		.loc 2 173 12 is_stmt 0
  93 004c 833784FB 		ld	a5,-72(s0)
  94              	.LBE21:
  95              	.LBE20:
  96              		.loc 1 18 40
  97 0050 2338F4FC 		sd	a5,-48(s0)
GAS LISTING /tmp/cclvbR5S.s 			page 6


  19:src/riscv.cpp ****     uint64 volatile scause = r_scause();
  98              		.loc 1 19 5 is_stmt 1
  99              	.LBB22:
 100              	.LBB23:
  91:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 101              		.loc 2 91 5
  92:src/../h/riscv.hpp ****     return scause;
 102              		.loc 2 92 5
  92:src/../h/riscv.hpp ****     return scause;
 103              		.loc 2 92 72 is_stmt 0
 104              	#APP
 105              	# 92 "src/../h/riscv.hpp" 1
 106              		csrr a5, scause
 107              	# 0 "" 2
 108              	#NO_APP
 109 0058 2338F4FA 		sd	a5,-80(s0)
  93:src/../h/riscv.hpp **** }
 110              		.loc 2 93 5 is_stmt 1
  93:src/../h/riscv.hpp **** }
 111              		.loc 2 93 12 is_stmt 0
 112 005c 833704FB 		ld	a5,-80(s0)
 113              	.LBE23:
 114              	.LBE22:
 115              		.loc 1 19 39
 116 0060 2334F4FC 		sd	a5,-56(s0)
  20:src/riscv.cpp ****     if (scause == 0x0000000000000008UL || scause == 0x0000000000000009UL)
 117              		.loc 1 20 5 is_stmt 1
 118              	.LBB24:
 119              		.loc 1 20 16 is_stmt 0
 120 0064 033784FC 		ld	a4,-56(s0)
 121              		.loc 1 20 40
 122 0068 93078000 		li	a5,8
 123 006c 6302F704 		beq	a4,a5,.L4
 124              		.loc 1 20 50 discriminator 2
 125 0070 033784FC 		ld	a4,-56(s0)
 126              		.loc 1 20 40 discriminator 2
 127 0074 93079000 		li	a5,9
 128 0078 630CF702 		beq	a4,a5,.L4
  21:src/riscv.cpp ****     {
  22:src/riscv.cpp ****         // interrupt: no; cause code: environment call from U-mode(8) or S-mode(9)
  23:src/riscv.cpp ****         sepc= sepc +4;
  24:src/riscv.cpp ****         uint64 CODE,arg1,arg2,arg3;
  25:src/riscv.cpp ****         uint64 rett;
  26:src/riscv.cpp ****         __asm__ volatile("mv %0, a0" : "=r" (CODE));
  27:src/riscv.cpp ****         __asm__ volatile("mv %0, a1" : "=r" (arg1));
  28:src/riscv.cpp ****         __asm__ volatile("mv %0, a2" : "=r" (arg2));
  29:src/riscv.cpp ****         __asm__ volatile("mv %0, a3" : "=r" (arg3));
  30:src/riscv.cpp ****         thread_t* handle;
  31:src/riscv.cpp **** 
  32:src/riscv.cpp ****         if (CODE == SCALL_THREAD_CREATE){
  33:src/riscv.cpp ****             handle = (thread_t*) arg1;
  34:src/riscv.cpp **** 
  35:src/riscv.cpp ****             if (handle != nullptr){
  36:src/riscv.cpp ****                 *handle = TCB::createThread(reinterpret_cast<void (*) (void*)>(arg2),(void*)arg3);
  37:src/riscv.cpp **** 
  38:src/riscv.cpp ****                 rett=0;
  39:src/riscv.cpp ****             }else {
GAS LISTING /tmp/cclvbR5S.s 			page 7


  40:src/riscv.cpp ****                 rett=-1;
  41:src/riscv.cpp ****             }
  42:src/riscv.cpp ****             __asm__ volatile ("sd %0, 10*8(fp)" :: "r"(rett));
  43:src/riscv.cpp **** 
  44:src/riscv.cpp ****         }else if (CODE == SCALL_THREAD_DISPATCH){
  45:src/riscv.cpp ****             TCB::timeSliceCounter=0;
  46:src/riscv.cpp ****             TCB::dispatch();
  47:src/riscv.cpp **** 
  48:src/riscv.cpp ****             w_sepc(sepc);
  49:src/riscv.cpp ****             w_sstatus(sstatus);
  50:src/riscv.cpp ****         }
  51:src/riscv.cpp **** 
  52:src/riscv.cpp **** 
  53:src/riscv.cpp **** 
  54:src/riscv.cpp ****         /*TCB::timeSliceCounter = 0;
  55:src/riscv.cpp ****         TCB::dispatch();
  56:src/riscv.cpp ****         w_sstatus(sstatus);
  57:src/riscv.cpp ****         w_sepc(sepc);*/
  58:src/riscv.cpp ****     }
  59:src/riscv.cpp ****     else if (scause == 0x8000000000000001UL)
 129              		.loc 1 59 10 is_stmt 1
 130              		.loc 1 59 21 is_stmt 0
 131 007c 033784FC 		ld	a4,-56(s0)
 132              		.loc 1 59 10
 133 0080 9307F0FF 		li	a5,-1
 134 0084 9397F703 		slli	a5,a5,63
 135 0088 93871700 		addi	a5,a5,1
 136 008c 6308F70A 		beq	a4,a5,.L13
  60:src/riscv.cpp ****     {
  61:src/riscv.cpp ****         // interrupt: yes; cause code: supervisor software interrupt (CLINT; machine timer interrup
  62:src/riscv.cpp ****         mc_sip(SIP_SSIP);
  63:src/riscv.cpp ****         TCB::timeSliceCounter++;
  64:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
  65:src/riscv.cpp ****         {
  66:src/riscv.cpp **** 
  67:src/riscv.cpp ****             thread_dispatch();
  68:src/riscv.cpp ****         }
  69:src/riscv.cpp ****     }
  70:src/riscv.cpp ****     else if (scause == 0x8000000000000009UL)
 137              		.loc 1 70 10 is_stmt 1
 138              		.loc 1 70 21 is_stmt 0
 139 0090 033784FC 		ld	a4,-56(s0)
 140              		.loc 1 70 10
 141 0094 9307F0FF 		li	a5,-1
 142 0098 9397F703 		slli	a5,a5,63
 143 009c 93879700 		addi	a5,a5,9
 144 00a0 631EF702 		bne	a4,a5,.L3
  71:src/riscv.cpp ****     {
  72:src/riscv.cpp ****         // interrupt: yes; cause code: supervisor external interrupt (PLIC; could be keyboard)
  73:src/riscv.cpp ****         console_handler();
 145              		.loc 1 73 9 is_stmt 1
 146              		.loc 1 73 24 is_stmt 0
 147 00a4 97000000 		call	console_handler@plt
 147      E7800000 
 148              	.LVL0:
 149              	.LBE24:
  74:src/riscv.cpp ****     }
GAS LISTING /tmp/cclvbR5S.s 			page 8


  75:src/riscv.cpp ****     else
  76:src/riscv.cpp ****     {
  77:src/riscv.cpp ****         // unexpected trap cause
  78:src/riscv.cpp ****     }
  79:src/riscv.cpp **** }...
 150              		.loc 1 79 1
 151 00ac 6F000003 		j	.L3
 152              	.L4:
 153              	.LBB35:
 154              	.LBB25:
  23:src/riscv.cpp ****         sepc= sepc +4;
 155              		.loc 1 23 9 is_stmt 1
  23:src/riscv.cpp ****         sepc= sepc +4;
 156              		.loc 1 23 15 is_stmt 0
 157 00b0 833784FD 		ld	a5,-40(s0)
  23:src/riscv.cpp ****         sepc= sepc +4;
 158              		.loc 1 23 20
 159 00b4 93874700 		addi	a5,a5,4
  23:src/riscv.cpp ****         sepc= sepc +4;
 160              		.loc 1 23 13
 161 00b8 233CF4FC 		sd	a5,-40(s0)
  24:src/riscv.cpp ****         uint64 CODE,arg1,arg2,arg3;
 162              		.loc 1 24 9 is_stmt 1
  25:src/riscv.cpp ****         uint64 rett;
 163              		.loc 1 25 9
  26:src/riscv.cpp ****         __asm__ volatile("mv %0, a0" : "=r" (CODE));
 164              		.loc 1 26 9
  26:src/riscv.cpp ****         __asm__ volatile("mv %0, a0" : "=r" (CODE));
 165              		.loc 1 26 52 is_stmt 0
 166              	#APP
 167              	# 26 "src/riscv.cpp" 1
 168              		mv a5, a0
 169              	# 0 "" 2
 170              	.LVL1:
  27:src/riscv.cpp ****         __asm__ volatile("mv %0, a1" : "=r" (arg1));
 171              		.loc 1 27 9 is_stmt 1
  27:src/riscv.cpp ****         __asm__ volatile("mv %0, a1" : "=r" (arg1));
 172              		.loc 1 27 52 is_stmt 0
 173              	# 27 "src/riscv.cpp" 1
 174              		mv s1, a1
 175              	# 0 "" 2
 176              	.LVL2:
  28:src/riscv.cpp ****         __asm__ volatile("mv %0, a2" : "=r" (arg2));
 177              		.loc 1 28 9 is_stmt 1
  28:src/riscv.cpp ****         __asm__ volatile("mv %0, a2" : "=r" (arg2));
 178              		.loc 1 28 52 is_stmt 0
 179              	# 28 "src/riscv.cpp" 1
 180              		mv a0, a2
 181              	# 0 "" 2
 182              	.LVL3:
  29:src/riscv.cpp ****         __asm__ volatile("mv %0, a3" : "=r" (arg3));
 183              		.loc 1 29 9 is_stmt 1
  29:src/riscv.cpp ****         __asm__ volatile("mv %0, a3" : "=r" (arg3));
 184              		.loc 1 29 52 is_stmt 0
 185              	# 29 "src/riscv.cpp" 1
 186              		mv a1, a3
 187              	# 0 "" 2
GAS LISTING /tmp/cclvbR5S.s 			page 9


 188              	.LVL4:
  30:src/riscv.cpp ****         thread_t* handle;
 189              		.loc 1 30 9 is_stmt 1
  32:src/riscv.cpp ****         if (CODE == SCALL_THREAD_CREATE){
 190              		.loc 1 32 9
 191              	#NO_APP
 192 00cc 13071001 		li	a4,17
 193 00d0 6380E702 		beq	a5,a4,.L14
  44:src/riscv.cpp ****         }else if (CODE == SCALL_THREAD_DISPATCH){
 194              		.loc 1 44 15
 195 00d4 13073001 		li	a4,19
 196 00d8 638EE702 		beq	a5,a4,.L15
 197              	.LVL5:
 198              	.L3:
 199              	.LBE25:
 200              	.LBE35:
 201              		.loc 1 79 1 is_stmt 0
 202 00dc 83308104 		ld	ra,72(sp)
 203              		.cfi_remember_state
 204              		.cfi_restore 1
 205 00e0 03340104 		ld	s0,64(sp)
 206              		.cfi_restore 8
 207              		.cfi_def_cfa 2, 80
 208 00e4 83348103 		ld	s1,56(sp)
 209              		.cfi_restore 9
 210 00e8 13010105 		addi	sp,sp,80
 211              		.cfi_def_cfa_offset 0
 212 00ec 67800000 		jr	ra
 213              	.LVL6:
 214              	.L14:
 215              		.cfi_restore_state
 216              	.LBB36:
 217              	.LBB30:
  33:src/riscv.cpp ****             handle = (thread_t*) arg1;
 218              		.loc 1 33 13 is_stmt 1
  35:src/riscv.cpp ****             if (handle != nullptr){
 219              		.loc 1 35 13
 220 00f0 63980400 		bnez	s1,.L16
  40:src/riscv.cpp ****                 rett=-1;
 221              		.loc 1 40 21 is_stmt 0
 222 00f4 9307F0FF 		li	a5,-1
 223              	.LVL7:
 224              	.L8:
  42:src/riscv.cpp ****             __asm__ volatile ("sd %0, 10*8(fp)" :: "r"(rett));
 225              		.loc 1 42 13 is_stmt 1
  42:src/riscv.cpp ****             __asm__ volatile ("sd %0, 10*8(fp)" :: "r"(rett));
 226              		.loc 1 42 62 is_stmt 0
 227              	#APP
 228              	# 42 "src/riscv.cpp" 1
 229              		sd a5, 10*8(fp)
 230              	# 0 "" 2
 231              	#NO_APP
 232 00fc 6FF01FFE 		j	.L3
 233              	.LVL8:
 234              	.L16:
  36:src/riscv.cpp ****                 *handle = TCB::createThread(reinterpret_cast<void (*) (void*)>(arg2),(void*)arg3);
 235              		.loc 1 36 17 is_stmt 1
GAS LISTING /tmp/cclvbR5S.s 			page 10


  36:src/riscv.cpp ****                 *handle = TCB::createThread(reinterpret_cast<void (*) (void*)>(arg2),(void*)arg3);
 236              		.loc 1 36 44 is_stmt 0
 237 0100 97000000 		call	_ZN3TCB12createThreadEPFvPvES0_@plt
 237      E7800000 
 238              	.LVL9:
  36:src/riscv.cpp ****                 *handle = TCB::createThread(reinterpret_cast<void (*) (void*)>(arg2),(void*)arg3);
 239              		.loc 1 36 25
 240 0108 23B0A400 		sd	a0,0(s1)
  38:src/riscv.cpp ****                 rett=0;
 241              		.loc 1 38 17 is_stmt 1
 242              	.LVL10:
  38:src/riscv.cpp ****                 rett=0;
 243              		.loc 1 38 21 is_stmt 0
 244 010c 93070000 		li	a5,0
 245 0110 6FF09FFE 		j	.L8
 246              	.LVL11:
 247              	.L15:
  45:src/riscv.cpp ****             TCB::timeSliceCounter=0;
 248              		.loc 1 45 13 is_stmt 1
  45:src/riscv.cpp ****             TCB::timeSliceCounter=0;
 249              		.loc 1 45 34 is_stmt 0
 250 0114 97070000 		la	a5,_ZN3TCB16timeSliceCounterE
 250      83B70700 
 251              	.LVL12:
 252 011c 23B00700 		sd	zero,0(a5)
  46:src/riscv.cpp ****             TCB::dispatch();
 253              		.loc 1 46 13 is_stmt 1
  46:src/riscv.cpp ****             TCB::dispatch();
 254              		.loc 1 46 26 is_stmt 0
 255 0120 97000000 		call	_ZN3TCB8dispatchEv@plt
 255      E7800000 
 256              	.LVL13:
  48:src/riscv.cpp ****             w_sepc(sepc);
 257              		.loc 1 48 13 is_stmt 1
  48:src/riscv.cpp ****             w_sepc(sepc);
 258              		.loc 1 48 19 is_stmt 0
 259 0128 833784FD 		ld	a5,-40(s0)
 260              	.LVL14:
 261              	.LBB26:
 262              	.LBB27:
 110:src/../h/riscv.hpp **** }
 263              		.loc 2 110 5 is_stmt 1
 110:src/../h/riscv.hpp **** }
 264              		.loc 2 110 65 is_stmt 0
 265              	#APP
 266              	# 110 "src/../h/riscv.hpp" 1
 267              		csrw sepc, a5
 268              	# 0 "" 2
 269              	.LVL15:
 270              	#NO_APP
 271              	.LBE27:
 272              	.LBE26:
  49:src/riscv.cpp ****             w_sstatus(sstatus);
 273              		.loc 1 49 13 is_stmt 1
  49:src/riscv.cpp ****             w_sstatus(sstatus);
 274              		.loc 1 49 22 is_stmt 0
 275 0130 833704FD 		ld	a5,-48(s0)
GAS LISTING /tmp/cclvbR5S.s 			page 11


 276              	.LVL16:
 277              	.LBB28:
 278              	.LBB29:
 174:src/../h/riscv.hpp **** }
 175:src/../h/riscv.hpp **** 
 176:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 177:src/../h/riscv.hpp **** {
 178:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 279              		.loc 2 178 5 is_stmt 1
 280              		.loc 2 178 77 is_stmt 0
 281              	#APP
 282              	# 178 "src/../h/riscv.hpp" 1
 179              	}
 283              		csrw sstatus, a5
 284              	# 0 "" 2
 285              		.loc 2 179 1
 286              	#NO_APP
 287 0138 6FF05FFA 		j	.L3
 288              	.LVL17:
 289              	.L13:
 290              	.LBE29:
 291              	.LBE28:
 292              	.LBE30:
  62:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 293              		.loc 1 62 9 is_stmt 1
 294              	.LBB31:
 295              	.LBB32:
 144:src/../h/riscv.hpp **** }
 296              		.loc 2 144 5
 144:src/../h/riscv.hpp **** }
 297              		.loc 2 144 64 is_stmt 0
 298 013c 93072000 		li	a5,2
 299              	#APP
 300              	# 144 "src/../h/riscv.hpp" 1
 301              		csrc sip, a5
 302              	# 0 "" 2
 303              	.LVL18:
 304              	#NO_APP
 305              	.LBE32:
 306              	.LBE31:
  63:src/riscv.cpp ****         TCB::timeSliceCounter++;
 307              		.loc 1 63 9 is_stmt 1
  63:src/riscv.cpp ****         TCB::timeSliceCounter++;
 308              		.loc 1 63 30 is_stmt 0
 309 0144 17070000 		la	a4,_ZN3TCB16timeSliceCounterE
 309      03370700 
 310 014c 83370700 		ld	a5,0(a4)
 311 0150 93871700 		addi	a5,a5,1
 312 0154 2330F700 		sd	a5,0(a4)
  64:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 313              		.loc 1 64 9 is_stmt 1
  64:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 314              		.loc 1 64 64 is_stmt 0
 315 0158 17070000 		la	a4,_ZN3TCB7runningE
 315      03370700 
 316 0160 03370700 		ld	a4,0(a4)
 317              	.LVL19:
GAS LISTING /tmp/cclvbR5S.s 			page 12


 318              	.LBB33:
 319              	.LBB34:
 320              		.file 3 "src/../h/tcb.hpp"
   1:src/../h/tcb.hpp **** //
   2:src/../h/tcb.hpp **** // Created by marko on 20.4.22..
   3:src/../h/tcb.hpp **** //
   4:src/../h/tcb.hpp **** 
   5:src/../h/tcb.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_TCB_HPP
   6:src/../h/tcb.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_TCB_HPP
   7:src/../h/tcb.hpp **** 
   8:src/../h/tcb.hpp **** #include "../lib/hw.h"
   9:src/../h/tcb.hpp **** #include "scheduler.hpp"
  10:src/../h/tcb.hpp **** 
  11:src/../h/tcb.hpp **** // Thread Control Block
  12:src/../h/tcb.hpp **** class TCB
  13:src/../h/tcb.hpp **** {
  14:src/../h/tcb.hpp **** public:
  15:src/../h/tcb.hpp ****     ~TCB() { delete[] stack; }
  16:src/../h/tcb.hpp **** 
  17:src/../h/tcb.hpp ****     bool isFinished() const { return finished; }
  18:src/../h/tcb.hpp **** 
  19:src/../h/tcb.hpp ****     void setFinished(bool value) { finished = value; }
  20:src/../h/tcb.hpp **** 
  21:src/../h/tcb.hpp ****     uint64 getTimeSlice() const { return timeSlice; }
 321              		.loc 3 21 35 is_stmt 1
 322              		.loc 3 21 42 is_stmt 0
 323 0164 03378702 		ld	a4,40(a4)
 324              	.LVL20:
 325              	.LBE34:
 326              	.LBE33:
  64:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 327              		.loc 1 64 9
 328 0168 E3EAE7F6 		bltu	a5,a4,.L3
  67:src/riscv.cpp ****             thread_dispatch();
 329              		.loc 1 67 13 is_stmt 1
  67:src/riscv.cpp ****             thread_dispatch();
 330              		.loc 1 67 28 is_stmt 0
 331 016c 97000000 		call	_Z15thread_dispatchv@plt
 331      E7800000 
 332              	.LVL21:
 333 0174 6FF09FF6 		j	.L3
 334              	.LBE36:
 335              		.cfi_endproc
 336              	.LFE34:
 338              	.Letext0:
 339              		.file 4 "src/../h/../lib/hw.h"
 340              		.file 5 "src/../h/syscall_c.hpp"
 341              		.file 6 "src/../lib/console.h"
GAS LISTING /tmp/cclvbR5S.s 			page 13


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/cclvbR5S.s:9      .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/cclvbR5S.s:13     .text:0000000000000000 .L0 
     /tmp/cclvbR5S.s:14     .text:0000000000000000 .L0 
     /tmp/cclvbR5S.s:15     .text:0000000000000004 .L0 
     /tmp/cclvbR5S.s:17     .text:0000000000000008 .L0 
     /tmp/cclvbR5S.s:19     .text:000000000000000c .L0 
     /tmp/cclvbR5S.s:21     .text:000000000000000c .L0 
       src/riscv.cpp:11     .text:000000000000000c .L0 
     /tmp/cclvbR5S.s:27     .text:0000000000000010 .L0 
       src/riscv.cpp:12     .text:0000000000000010 .L0 
     /tmp/cclvbR5S.s:33     .text:0000000000000014 .L0 
     /tmp/cclvbR5S.s:34     .text:0000000000000018 .L0 
     /tmp/cclvbR5S.s:35     .text:0000000000000018 .L0 
     /tmp/cclvbR5S.s:37     .text:000000000000001c .L0 
     /tmp/cclvbR5S.s:39     .text:0000000000000020 .L0 
     /tmp/cclvbR5S.s:45     .text:0000000000000020 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/cclvbR5S.s:48     .text:0000000000000020 .L0 
     /tmp/cclvbR5S.s:49     .text:0000000000000020 .L0 
     /tmp/cclvbR5S.s:50     .text:0000000000000024 .L0 
     /tmp/cclvbR5S.s:54     .text:0000000000000030 .L0 
     /tmp/cclvbR5S.s:55     .text:0000000000000030 .L0 
     /tmp/cclvbR5S.s:56     .text:0000000000000030 .L0 
     /tmp/cclvbR5S.s:58     .text:0000000000000034 .L0 
     /tmp/cclvbR5S.s:63     .text:0000000000000034 .L0 
     /tmp/cclvbR5S.s:64     .text:0000000000000034 .L0 
     /tmp/cclvbR5S.s:65     .text:0000000000000034 .L0 
  src/../h/riscv.hpp:104    .text:0000000000000034 .L0 
     /tmp/cclvbR5S.s:73     .text:000000000000003c .L0 
     /tmp/cclvbR5S.s:74     .text:000000000000003c .L0 
     /tmp/cclvbR5S.s:78     .text:0000000000000040 .L0 
     /tmp/cclvbR5S.s:82     .text:0000000000000044 .L0 
     /tmp/cclvbR5S.s:83     .text:0000000000000044 .L0 
     /tmp/cclvbR5S.s:84     .text:0000000000000044 .L0 
  src/../h/riscv.hpp:172    .text:0000000000000044 .L0 
     /tmp/cclvbR5S.s:92     .text:000000000000004c .L0 
     /tmp/cclvbR5S.s:93     .text:000000000000004c .L0 
     /tmp/cclvbR5S.s:97     .text:0000000000000050 .L0 
     /tmp/cclvbR5S.s:101    .text:0000000000000054 .L0 
     /tmp/cclvbR5S.s:102    .text:0000000000000054 .L0 
     /tmp/cclvbR5S.s:103    .text:0000000000000054 .L0 
  src/../h/riscv.hpp:92     .text:0000000000000054 .L0 
     /tmp/cclvbR5S.s:111    .text:000000000000005c .L0 
     /tmp/cclvbR5S.s:112    .text:000000000000005c .L0 
     /tmp/cclvbR5S.s:116    .text:0000000000000060 .L0 
     /tmp/cclvbR5S.s:119    .text:0000000000000064 .L0 
     /tmp/cclvbR5S.s:120    .text:0000000000000064 .L0 
     /tmp/cclvbR5S.s:122    .text:0000000000000068 .L0 
     /tmp/cclvbR5S.s:125    .text:0000000000000070 .L0 
     /tmp/cclvbR5S.s:127    .text:0000000000000074 .L0 
     /tmp/cclvbR5S.s:130    .text:000000000000007c .L0 
     /tmp/cclvbR5S.s:131    .text:000000000000007c .L0 
     /tmp/cclvbR5S.s:133    .text:0000000000000080 .L0 
     /tmp/cclvbR5S.s:138    .text:0000000000000090 .L0 
     /tmp/cclvbR5S.s:139    .text:0000000000000090 .L0 
     /tmp/cclvbR5S.s:141    .text:0000000000000094 .L0 
GAS LISTING /tmp/cclvbR5S.s 			page 14


     /tmp/cclvbR5S.s:146    .text:00000000000000a4 .L0 
     /tmp/cclvbR5S.s:147    .text:00000000000000a4 .L0 
     /tmp/cclvbR5S.s:151    .text:00000000000000ac .L0 
     /tmp/cclvbR5S.s:156    .text:00000000000000b0 .L0 
     /tmp/cclvbR5S.s:157    .text:00000000000000b0 .L0 
     /tmp/cclvbR5S.s:159    .text:00000000000000b4 .L0 
     /tmp/cclvbR5S.s:161    .text:00000000000000b8 .L0 
     /tmp/cclvbR5S.s:163    .text:00000000000000bc .L0 
     /tmp/cclvbR5S.s:164    .text:00000000000000bc .L0 
     /tmp/cclvbR5S.s:165    .text:00000000000000bc .L0 
       src/riscv.cpp:26     .text:00000000000000bc .L0 
     /tmp/cclvbR5S.s:172    .text:00000000000000c0 .L0 
       src/riscv.cpp:27     .text:00000000000000c0 .L0 
     /tmp/cclvbR5S.s:178    .text:00000000000000c4 .L0 
       src/riscv.cpp:28     .text:00000000000000c4 .L0 
     /tmp/cclvbR5S.s:184    .text:00000000000000c8 .L0 
       src/riscv.cpp:29     .text:00000000000000c8 .L0 
     /tmp/cclvbR5S.s:190    .text:00000000000000cc .L0 
     /tmp/cclvbR5S.s:192    .text:00000000000000cc .L0 
     /tmp/cclvbR5S.s:195    .text:00000000000000d4 .L0 
     /tmp/cclvbR5S.s:202    .text:00000000000000dc .L0 
     /tmp/cclvbR5S.s:203    .text:00000000000000e0 .L0 
     /tmp/cclvbR5S.s:204    .text:00000000000000e0 .L0 
     /tmp/cclvbR5S.s:206    .text:00000000000000e4 .L0 
     /tmp/cclvbR5S.s:207    .text:00000000000000e4 .L0 
     /tmp/cclvbR5S.s:209    .text:00000000000000e8 .L0 
     /tmp/cclvbR5S.s:211    .text:00000000000000ec .L0 
     /tmp/cclvbR5S.s:215    .text:00000000000000f0 .L0 
     /tmp/cclvbR5S.s:219    .text:00000000000000f0 .L0 
     /tmp/cclvbR5S.s:220    .text:00000000000000f0 .L0 
     /tmp/cclvbR5S.s:222    .text:00000000000000f4 .L0 
     /tmp/cclvbR5S.s:226    .text:00000000000000f8 .L0 
       src/riscv.cpp:42     .text:00000000000000f8 .L0 
     /tmp/cclvbR5S.s:236    .text:0000000000000100 .L0 
     /tmp/cclvbR5S.s:237    .text:0000000000000100 .L0 
     /tmp/cclvbR5S.s:240    .text:0000000000000108 .L0 
     /tmp/cclvbR5S.s:243    .text:000000000000010c .L0 
     /tmp/cclvbR5S.s:244    .text:000000000000010c .L0 
     /tmp/cclvbR5S.s:249    .text:0000000000000114 .L0 
     /tmp/cclvbR5S.s:250    .text:0000000000000114 .L0 
     /tmp/cclvbR5S.s:254    .text:0000000000000120 .L0 
     /tmp/cclvbR5S.s:255    .text:0000000000000120 .L0 
     /tmp/cclvbR5S.s:258    .text:0000000000000128 .L0 
     /tmp/cclvbR5S.s:259    .text:0000000000000128 .L0 
     /tmp/cclvbR5S.s:264    .text:000000000000012c .L0 
  src/../h/riscv.hpp:110    .text:000000000000012c .L0 
     /tmp/cclvbR5S.s:274    .text:0000000000000130 .L0 
     /tmp/cclvbR5S.s:275    .text:0000000000000130 .L0 
     /tmp/cclvbR5S.s:280    .text:0000000000000134 .L0 
  src/../h/riscv.hpp:178    .text:0000000000000134 .L0 
     /tmp/cclvbR5S.s:287    .text:0000000000000138 .L0 
     /tmp/cclvbR5S.s:296    .text:000000000000013c .L0 
     /tmp/cclvbR5S.s:297    .text:000000000000013c .L0 
     /tmp/cclvbR5S.s:298    .text:000000000000013c .L0 
     /tmp/cclvbR5S.s:308    .text:0000000000000144 .L0 
     /tmp/cclvbR5S.s:309    .text:0000000000000144 .L0 
     /tmp/cclvbR5S.s:314    .text:0000000000000158 .L0 
GAS LISTING /tmp/cclvbR5S.s 			page 15


     /tmp/cclvbR5S.s:315    .text:0000000000000158 .L0 
     /tmp/cclvbR5S.s:322    .text:0000000000000164 .L0 
     /tmp/cclvbR5S.s:323    .text:0000000000000164 .L0 
     /tmp/cclvbR5S.s:328    .text:0000000000000168 .L0 
     /tmp/cclvbR5S.s:330    .text:000000000000016c .L0 
     /tmp/cclvbR5S.s:331    .text:000000000000016c .L0 
     /tmp/cclvbR5S.s:335    .text:0000000000000178 .L0 
     /tmp/cclvbR5S.s:342    .text:0000000000000178 .L0 
     /tmp/cclvbR5S.s:250    .text:0000000000000114 .L0 
     /tmp/cclvbR5S.s:309    .text:0000000000000144 .L0 
     /tmp/cclvbR5S.s:315    .text:0000000000000158 .L0 
     /tmp/cclvbR5S.s:152    .text:00000000000000b0 .L4
     /tmp/cclvbR5S.s:289    .text:000000000000013c .L13
     /tmp/cclvbR5S.s:198    .text:00000000000000dc .L3
     /tmp/cclvbR5S.s:214    .text:00000000000000f0 .L14
     /tmp/cclvbR5S.s:247    .text:0000000000000114 .L15
     /tmp/cclvbR5S.s:234    .text:0000000000000100 .L16
     /tmp/cclvbR5S.s:224    .text:00000000000000f8 .L8
     /tmp/cclvbR5S.s:1262   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/cclvbR5S.s:2425   .debug_str:000000000000054b .LASF101
     /tmp/cclvbR5S.s:2379   .debug_str:00000000000003f7 .LASF102
     /tmp/cclvbR5S.s:2293   .debug_str:00000000000001aa .LASF103
     /tmp/cclvbR5S.s:5      .text:0000000000000000 .Ltext0
     /tmp/cclvbR5S.s:338    .text:0000000000000178 .Letext0
     /tmp/cclvbR5S.s:2227   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/cclvbR5S.s:2359   .debug_str:000000000000038b .LASF0
     /tmp/cclvbR5S.s:2375   .debug_str:00000000000003d1 .LASF1
     /tmp/cclvbR5S.s:2347   .debug_str:000000000000032f .LASF2
     /tmp/cclvbR5S.s:2275   .debug_str:000000000000012c .LASF3
     /tmp/cclvbR5S.s:2323   .debug_str:000000000000029f .LASF4
     /tmp/cclvbR5S.s:2405   .debug_str:00000000000004be .LASF5
     /tmp/cclvbR5S.s:2253   .debug_str:0000000000000082 .LASF6
     /tmp/cclvbR5S.s:2377   .debug_str:00000000000003e4 .LASF7
     /tmp/cclvbR5S.s:2357   .debug_str:0000000000000378 .LASF8
     /tmp/cclvbR5S.s:2429   .debug_str:000000000000061e .LASF9
     /tmp/cclvbR5S.s:2311   .debug_str:0000000000000224 .LASF10
     /tmp/cclvbR5S.s:2387   .debug_str:0000000000000444 .LASF11
     /tmp/cclvbR5S.s:2427   .debug_str:000000000000060f .LASF12
     /tmp/cclvbR5S.s:2255   .debug_str:0000000000000089 .LASF13
     /tmp/cclvbR5S.s:2235   .debug_str:0000000000000027 .LASF14
     /tmp/cclvbR5S.s:2263   .debug_str:00000000000000d3 .LASF15
     /tmp/cclvbR5S.s:2399   .debug_str:000000000000048a .LASF16
     /tmp/cclvbR5S.s:2271   .debug_str:0000000000000102 .LASF17
     /tmp/cclvbR5S.s:2371   .debug_str:00000000000003c0 .LASF57
     /tmp/cclvbR5S.s:2335   .debug_str:00000000000002e7 .LASF104
     /tmp/cclvbR5S.s:2413   .debug_str:00000000000004f7 .LASF18
     /tmp/cclvbR5S.s:2369   .debug_str:00000000000003b7 .LASF19
     /tmp/cclvbR5S.s:2329   .debug_str:00000000000002b4 .LASF20
     /tmp/cclvbR5S.s:2397   .debug_str:000000000000047f .LASF53
     /tmp/cclvbR5S.s:2443   .debug_str:000000000000068d .LASF55
     /tmp/cclvbR5S.s:2237   .debug_str:0000000000000037 .LASF21
     /tmp/cclvbR5S.s:2285   .debug_str:0000000000000169 .LASF23
     /tmp/cclvbR5S.s:2281   .debug_str:0000000000000158 .LASF25
     /tmp/cclvbR5S.s:2279   .debug_str:0000000000000143 .LASF27
     /tmp/cclvbR5S.s:2409   .debug_str:00000000000004e1 .LASF22
     /tmp/cclvbR5S.s:2389   .debug_str:0000000000000453 .LASF24
     /tmp/cclvbR5S.s:2423   .debug_str:0000000000000544 .LASF26
GAS LISTING /tmp/cclvbR5S.s 			page 16


     /tmp/cclvbR5S.s:2419   .debug_str:000000000000051f .LASF28
     /tmp/cclvbR5S.s:2299   .debug_str:00000000000001f0 .LASF29
     /tmp/cclvbR5S.s:2273   .debug_str:0000000000000118 .LASF30
     /tmp/cclvbR5S.s:2231   .debug_str:0000000000000009 .LASF31
     /tmp/cclvbR5S.s:2315   .debug_str:0000000000000248 .LASF32
     /tmp/cclvbR5S.s:2251   .debug_str:000000000000007a .LASF33
     /tmp/cclvbR5S.s:2257   .debug_str:0000000000000099 .LASF34
     /tmp/cclvbR5S.s:2447   .debug_str:00000000000006b0 .LASF35
     /tmp/cclvbR5S.s:2287   .debug_str:000000000000017e .LASF36
     /tmp/cclvbR5S.s:2361   .debug_str:0000000000000398 .LASF37
     /tmp/cclvbR5S.s:2439   .debug_str:0000000000000675 .LASF38
     /tmp/cclvbR5S.s:2247   .debug_str:000000000000005a .LASF39
     /tmp/cclvbR5S.s:2297   .debug_str:00000000000001dd .LASF40
     /tmp/cclvbR5S.s:2307   .debug_str:0000000000000207 .LASF41
     /tmp/cclvbR5S.s:2421   .debug_str:0000000000000532 .LASF42
     /tmp/cclvbR5S.s:2243   .debug_str:000000000000004f .LASF43
     /tmp/cclvbR5S.s:2453   .debug_str:00000000000006d4 .LASF44
     /tmp/cclvbR5S.s:2445   .debug_str:00000000000006a5 .LASF45
     /tmp/cclvbR5S.s:2403   .debug_str:00000000000004a6 .LASF46
     /tmp/cclvbR5S.s:2373   .debug_str:00000000000003c6 .LASF47
     /tmp/cclvbR5S.s:2415   .debug_str:0000000000000500 .LASF48
     /tmp/cclvbR5S.s:2261   .debug_str:00000000000000c9 .LASF49
     /tmp/cclvbR5S.s:2319   .debug_str:0000000000000261 .LASF50
     /tmp/cclvbR5S.s:2351   .debug_str:0000000000000349 .LASF51
     /tmp/cclvbR5S.s:2313   .debug_str:0000000000000232 .LASF52
     /tmp/cclvbR5S.s:2411   .debug_str:00000000000004e8 .LASF54
     /tmp/cclvbR5S.s:2259   .debug_str:00000000000000ad .LASF56
     /tmp/cclvbR5S.s:2431   .debug_str:000000000000062e .LASF75
     /tmp/cclvbR5S.s:2333   .debug_str:00000000000002c5 .LASF77
     /tmp/cclvbR5S.s:2241   .debug_str:0000000000000047 .LASF105
     /tmp/cclvbR5S.s:2317   .debug_str:000000000000025c .LASF58
     /tmp/cclvbR5S.s:2391   .debug_str:0000000000000466 .LASF60
     /tmp/cclvbR5S.s:2381   .debug_str:0000000000000405 .LASF62
     /tmp/cclvbR5S.s:2309   .debug_str:000000000000020d .LASF64
     /tmp/cclvbR5S.s:2349   .debug_str:000000000000033d .LASF59
     /tmp/cclvbR5S.s:2449   .debug_str:00000000000006b8 .LASF61
     /tmp/cclvbR5S.s:2343   .debug_str:0000000000000314 .LASF63
     /tmp/cclvbR5S.s:2249   .debug_str:0000000000000061 .LASF65
     /tmp/cclvbR5S.s:2269   .debug_str:00000000000000f5 .LASF66
     /tmp/cclvbR5S.s:2383   .debug_str:0000000000000410 .LASF67
     /tmp/cclvbR5S.s:2395   .debug_str:000000000000047a .LASF106
     /tmp/cclvbR5S.s:2401   .debug_str:00000000000004a0 .LASF68
     /tmp/cclvbR5S.s:2353   .debug_str:0000000000000353 .LASF69
     /tmp/cclvbR5S.s:2283   .debug_str:0000000000000161 .LASF107
     /tmp/cclvbR5S.s:2355   .debug_str:0000000000000363 .LASF108
     /tmp/cclvbR5S.s:2327   .debug_str:00000000000002af .LASF70
     /tmp/cclvbR5S.s:2265   .debug_str:00000000000000df .LASF71
     /tmp/cclvbR5S.s:2331   .debug_str:00000000000002bd .LASF72
     /tmp/cclvbR5S.s:2367   .debug_str:00000000000003ad .LASF73
     /tmp/cclvbR5S.s:2325   .debug_str:00000000000002a6 .LASF74
     /tmp/cclvbR5S.s:2345   .debug_str:0000000000000321 .LASF76
     /tmp/cclvbR5S.s:2435   .debug_str:0000000000000651 .LASF78
     /tmp/cclvbR5S.s:2433   .debug_str:0000000000000643 .LASF109
     /tmp/cclvbR5S.s:2321   .debug_str:0000000000000277 .LASF110
     /tmp/cclvbR5S.s:2363   .debug_str:000000000000039f .LASF79
     /tmp/cclvbR5S.s:2289   .debug_str:0000000000000192 .LASF80
     /tmp/cclvbR5S.s:2407   .debug_str:00000000000004d0 .LASF111
GAS LISTING /tmp/cclvbR5S.s 			page 17


     /tmp/cclvbR5S.s:2337   .debug_str:00000000000002f2 .LASF81
     /tmp/cclvbR5S.s:2437   .debug_str:000000000000066a .LASF82
     /tmp/cclvbR5S.s:2291   .debug_str:00000000000001a5 .LASF83
     /tmp/cclvbR5S.s:2385   .debug_str:0000000000000430 .LASF84
     /tmp/cclvbR5S.s:2339   .debug_str:00000000000002fd .LASF85
     /tmp/cclvbR5S.s:2233   .debug_str:0000000000000011 .LASF86
     /tmp/cclvbR5S.s:2229   .debug_str:0000000000000000 .LASF87
     /tmp/cclvbR5S.s:46     .text:0000000000000020 .LFB34
     /tmp/cclvbR5S.s:336    .text:0000000000000178 .LFE34
     /tmp/cclvbR5S.s:2365   .debug_str:00000000000003a8 .LASF88
     /tmp/cclvbR5S.s:2393   .debug_str:0000000000000472 .LASF89
     /tmp/cclvbR5S.s:2239   .debug_str:0000000000000040 .LASF90
     /tmp/cclvbR5S.s:2219   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/cclvbR5S.s:2245   .debug_str:0000000000000055 .LASF91
     /tmp/cclvbR5S.s:2090   .debug_loc:0000000000000000 .LLST0
     /tmp/cclvbR5S.s:2301   .debug_str:00000000000001f8 .LASF92
     /tmp/cclvbR5S.s:2109   .debug_loc:000000000000005c .LLST1
     /tmp/cclvbR5S.s:2303   .debug_str:00000000000001fd .LASF93
     /tmp/cclvbR5S.s:2120   .debug_loc:0000000000000092 .LLST2
     /tmp/cclvbR5S.s:2305   .debug_str:0000000000000202 .LASF94
     /tmp/cclvbR5S.s:2139   .debug_loc:00000000000000ee .LLST3
     /tmp/cclvbR5S.s:2341   .debug_str:000000000000030f .LASF95
     /tmp/cclvbR5S.s:2158   .debug_loc:000000000000014a .LLST4
     /tmp/cclvbR5S.s:2417   .debug_str:0000000000000518 .LASF96
     /tmp/cclvbR5S.s:2170   .debug_loc:0000000000000181 .LLST5
     /tmp/cclvbR5S.s:261    .text:000000000000012c .LBB26
     /tmp/cclvbR5S.s:272    .text:0000000000000130 .LBE26
     /tmp/cclvbR5S.s:2177   .debug_loc:00000000000001a4 .LLST6
     /tmp/cclvbR5S.s:277    .text:0000000000000134 .LBB28
     /tmp/cclvbR5S.s:291    .text:000000000000013c .LBE28
     /tmp/cclvbR5S.s:2184   .debug_loc:00000000000001c7 .LLST7
     /tmp/cclvbR5S.s:238    .text:0000000000000108 .LVL9
     /tmp/cclvbR5S.s:256    .text:0000000000000128 .LVL13
     /tmp/cclvbR5S.s:60     .text:0000000000000034 .LBB18
     /tmp/cclvbR5S.s:76     .text:0000000000000040 .LBE18
     /tmp/cclvbR5S.s:80     .text:0000000000000044 .LBB20
     /tmp/cclvbR5S.s:95     .text:0000000000000050 .LBE20
     /tmp/cclvbR5S.s:99     .text:0000000000000054 .LBB22
     /tmp/cclvbR5S.s:114    .text:0000000000000060 .LBE22
     /tmp/cclvbR5S.s:294    .text:000000000000013c .LBB31
     /tmp/cclvbR5S.s:306    .text:0000000000000144 .LBE31
     /tmp/cclvbR5S.s:2191   .debug_loc:00000000000001ea .LLST8
     /tmp/cclvbR5S.s:318    .text:0000000000000164 .LBB33
     /tmp/cclvbR5S.s:326    .text:0000000000000168 .LBE33
     /tmp/cclvbR5S.s:2199   .debug_loc:000000000000020e .LLST9
     /tmp/cclvbR5S.s:148    .text:00000000000000ac .LVL0
     /tmp/cclvbR5S.s:332    .text:0000000000000174 .LVL21
     /tmp/cclvbR5S.s:10     .text:0000000000000000 .LFB33
     /tmp/cclvbR5S.s:40     .text:0000000000000020 .LFE33
     /tmp/cclvbR5S.s:2441   .debug_str:0000000000000688 .LASF112
     /tmp/cclvbR5S.s:2451   .debug_str:00000000000006cf .LASF97
     /tmp/cclvbR5S.s:2277   .debug_str:0000000000000133 .LASF98
     /tmp/cclvbR5S.s:2295   .debug_str:00000000000001c8 .LASF99
     /tmp/cclvbR5S.s:2267   .debug_str:00000000000000e5 .LASF100
     /tmp/cclvbR5S.s:170    .text:00000000000000c0 .LVL1
     /tmp/cclvbR5S.s:197    .text:00000000000000dc .LVL5
     /tmp/cclvbR5S.s:213    .text:00000000000000f0 .LVL6
GAS LISTING /tmp/cclvbR5S.s 			page 18


     /tmp/cclvbR5S.s:223    .text:00000000000000f8 .LVL7
     /tmp/cclvbR5S.s:233    .text:0000000000000100 .LVL8
     /tmp/cclvbR5S.s:246    .text:0000000000000114 .LVL11
     /tmp/cclvbR5S.s:251    .text:000000000000011c .LVL12
     /tmp/cclvbR5S.s:176    .text:00000000000000c4 .LVL2
     /tmp/cclvbR5S.s:288    .text:000000000000013c .LVL17
     /tmp/cclvbR5S.s:182    .text:00000000000000c8 .LVL3
     /tmp/cclvbR5S.s:188    .text:00000000000000cc .LVL4
     /tmp/cclvbR5S.s:242    .text:000000000000010c .LVL10
     /tmp/cclvbR5S.s:260    .text:000000000000012c .LVL14
     /tmp/cclvbR5S.s:269    .text:0000000000000130 .LVL15
     /tmp/cclvbR5S.s:276    .text:0000000000000134 .LVL16
     /tmp/cclvbR5S.s:303    .text:0000000000000144 .LVL18
     /tmp/cclvbR5S.s:317    .text:0000000000000164 .LVL19
     /tmp/cclvbR5S.s:324    .text:0000000000000168 .LVL20
     /tmp/cclvbR5S.s:343    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/cclvbR5S.s:154    .text:00000000000000b0 .LBB25
     /tmp/cclvbR5S.s:199    .text:00000000000000dc .LBE25
     /tmp/cclvbR5S.s:217    .text:00000000000000f0 .LBB30
     /tmp/cclvbR5S.s:292    .text:000000000000013c .LBE30

UNDEFINED SYMBOLS
console_handler
_ZN3TCB12createThreadEPFvPvES0_
_ZN3TCB16timeSliceCounterE
_ZN3TCB8dispatchEv
_ZN3TCB7runningE
_Z15thread_dispatchv
